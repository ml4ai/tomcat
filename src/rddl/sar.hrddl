domain sar {
  requirements = {
    reward-deterministic,
    integer-valued,
    task-hierarchy //allows for compound-tasks, methods block, etc.
  };

  pvariables {
    YELLOW-POINT-VALUE : {non-fluent, int, default = 50};
    GREEN-POINT-VALUE : {non-fluent, int, default = 10};
    YELLOW-DEATH-TIME : {non-fluent, int, default = 420};
    END-GAME-TIME : {non-fluent, int, default = 600};

    time : {state-fluent, int, default = 0};
    num_of_yellow_victims_found_in_adj_room : {state-fluent, int, default = 0};
    num_of_green_victims_found_in_adj_room : {state-fluent, int, default = 0};
    times_searched : {state-fluent, int, default = 0};
    num_of_yellow_victims_found_in_current_room : {state-fluent, int, default = 0}; 
    num_of_green_victims_found_in_current_room : {state-fluent, int, default = 0};
    num_of_yellow_victims_triaged_in_current_room : {state-fluent, int, default = 0}; 
    num_of_green_victims_triaged_in_current_room : {state-fluent, int, default = 0};

    search : {action-fluent, bool, default = false};
    triageGreen : {action-fluent, bool, default = false};
    triageYellow: {action-fluent, bool, default = false};
    move : {action-fluent, bool, default = false};
    exit : {action-fluent, bool, default = false};

    YF: {compound-task}; //No other arguments
    O: {compound-task};
  };

  methods { //methods block
    method search_YF { //method block name is optional
      task = YF; //First variable must be set to compound-task

      precondition = //Second variable must be set to true, false, 1, or 0. 
        if (time >= END-GAME-TIME) 
          then 0
        else if (times_searched == 0)
          then 1
        else if (((num_of_yellow_victims_found_in_current_room - 
          num_of_yellow_victims_triaged_in_current_room) > 0) ^
            (time < YELLOW-DEATH-TIME - 15))
          then 0
        else if (((num_of_green_victims_found_in_current_room - 
          num_of_green_victims_triaged_in_current_room) > 0) ^
            (time >= YELLOW-DEATH-TIME - 15))
          then 0
        else if ((num_of_yellow_victims_found_in_adj_room > 0) ^
          (time < YELLOW-DEATH-TIME - 15))
          then 0
        else if ((num_of_green_victims_found_in_adj_room > 0) ^
          (time >= YELLOW-DEATH-TIME - 15))
          then 0
        else Bernoulli(1/(1+times_searched));

      //all proceeding variables must be action-fluents or compound-tasks
      //actions or tasks are executed in order that they appear

      search = 1; //Must be true, false, 1 or 0 because search is bool

      YF; //No assignments for compound tasks

      //concurrency only allowed for action-fluents

      //a = 1 ^ b = 1; //Do both a and b concurrently

      //a = 1 ? b = 1; //a and b are unordered

      //may add additional syntax for more complex partial ordering
    };
  };

  cpfs {
    time' = 
      if (search) then time + Poisson(5.5)
      else if (triageGreen) then time + 8
      else if (triageYellow) then time + 15
      else if (move) then time + Poisson(5.6)
      else time;

    num_of_yellow_victims_found_in_adj_room' = 
      if (search ^ (time < YELLOW-DEATH-TIME)) 
        then num_of_yellow_victims_found_in_adj_room + Poisson(0.2/(1+times_searched))
      else if (move)
        then 0
      else num_of_yellow_victims_found_in_adj_room;

    num_of_green_victims_found_in_adj_room' = 
      if (search) 
        then num_of_green_victims_found_in_adj_room + Poisson(0.5/(1+times_searched))
      else if (move)
        then 0
      else num_of_green_victims_found_in_adj_room;

    times_searched' = 
      if (move)
        then 0
      else times_searched + search;

    num_of_yellow_victims_found_in_current_room' = 
      if (search ^ (time < YELLOW-DEATH-TIME)) 
        then num_of_yellow_victims_found_in_current_room + Poisson(1/(1+times_searched))
      else if (move)
        then 0
      else num_of_yellow_victims_found_in_current_room;

    num_of_green_victims_found_in_current_room' = 
      if (search) 
        then num_of_green_victims_found_in_current_room + Poisson(1.5/(1+times_searched))
      else if (move)
        then 0
      else num_of_green_victims_found_in_current_room;

    num_of_yellow_victims_triaged_in_current_room' = 
      if (move)
        then 0
      else num_of_yellow_victims_triaged_in_current_room + triageYellow;

    num_of_green_victims_triaged_in_current_room' = 
      if (move)
        then 0
      else num_of_green_victims_triaged_in_current_room + triageGreen;


  };

  reward = (triageYellow * YELLOW-POINT-VALUE) + (triageGreen * GREEN-POINT-VALUE); 

  state-invariants {
    time >= 0;
    times_searched >= 0;
    num_of_yellow_victims_found_in_adj_room >= 0;
    num_of_green_victims_found_in_adj_room >= 0;
    num_of_yellow_victims_found_in_current_room >= 0;
    num_of_green_victims_found_in_current_room >= 0;
    num_of_yellow_victims_triaged_in_current_room >= 0;
    num_of_green_victims_triaged_in_current_room >= 0;
    num_of_yellow_victims_triaged_in_current_room
      <= num_of_yellow_victims_found_in_current_room;

    num_of_green_victims_triaged_in_current_room
      <= num_of_green_victims_found_in_current_room;


  };

  action-preconditions {
    ((num_of_yellow_victims_found_in_current_room -
      num_of_yellow_victims_triaged_in_current_room) == 0) 
        => ~triageYellow;

    ((num_of_green_victims_found_in_current_room -
      num_of_green_victims_triaged_in_current_room) == 0) 
        => ~triageGreen;

    (time < END-GAME-TIME) => ~exit;  
  };
}
