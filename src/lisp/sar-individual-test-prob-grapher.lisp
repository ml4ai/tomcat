(progn (ql:quickload "shop3")
       (ql:quickload "shop3/plan-grapher")
       (load "util.lisp")
       (load "sar-individual-domain.lisp")
       (setf *random-state* (make-random-state t)))

(in-package :shop-user)
(defvar *sar-state* '((room lobby) 
                          (room mens) 
                          (room womens) 
                          (room e-1) 
                          (room e-2) 
                          (room main-Intersection) 
                          (room mid-left-bottom-hallway) 
                          (room far-left-bottom-hallway) 
                          (room lower-left-hallway) 
                          (room upper-left-hallway) 
                          (room r-j) 
                          (room r-201) 
                          (room r-208-a) 
                          (room r-203) 
                          (room r-208-b) 
                          (room r-205) 
                          (room r-210) 
                          (room r-207) 
                          (room lower-center-hallway) 
                          (room upper-center-hallway) 
                          (room mid-right-bottom-hallway) 
                          (room far-right-bottom-hallway) 
                          (room lower-right-hallway) 
                          (room upper-right-hallway) 
                          (room r-209) 
                          (room r-216-a) 
                          (room r-211) 
                          (room r-216-b) 
                          (room r-213) 
                          (room r-218) 
                          (room r-215) 
                          (room r-220) 
                          (rescuer t1)  
                          (in t1 lobby)))

(defvar *task-type* 'perform-next-task-that-prioritizes-yellow-victims)

(defvar *sar-task* (list (list *task-type* 't1 'lobby)))

(defvar *mission-ongoing* t)

(make-problem 'sar-individual-problem *sar-state* *sar-task*)

(cl-dot::dot-graph (spg::graph-plan-tree (list (append '((complete-mission t1)) (loop while *mission-ongoing* collect 
                (first (first (let ((current-plan (multiple-value-list 
                                      (find-plans 'sar-individual-problem :which :first :optimize-cost nil :verbose nil :plan-tree t)))) 
                  (setf *sar-state* (state-atoms (first (fourth current-plan)))) 
                  (if (eql '!move (first (first (first (first current-plan))))) 
                    (setf *sar-task* (list (list *task-type* 
                                                 (second (first (first (first current-plan)))) 
                                                 (fourth (first (first (first current-plan)))))))) 
                (if (eql '!leave (first (first (first (first current-plan))))) 
                  (setf *mission-ongoing* nil))
                (make-problem 'sar-individual-problem *sar-state* *sar-task*) 
                (third current-plan))))))))
                   "sar-graph.pdf" :format "pdf")
