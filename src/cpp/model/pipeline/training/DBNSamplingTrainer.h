#pragma once

#include "DBNTrainer.h"

#include "utils/Definitions.h"
#include "sampling/Sampler.h"

namespace tomcat {
    namespace model {

        /**
         * This class is responsible for estimating a DBN's parameters by
         * average over their samples generated by some sampler.
         */
        class DBNSamplingTrainer : public DBNTrainer {
          public: // same pattern for protected and private in this order
            //------------------------------------------------------------------
            // Constructors & Destructor
            //------------------------------------------------------------------
            DBNSamplingTrainer(std::shared_ptr<gsl_rng> random_generator,
                               std::shared_ptr<Sampler> sampler,
                               int num_samples);

            ~DBNSamplingTrainer();

            //------------------------------------------------------------------
            // Copy & Move constructors/assignments
            //------------------------------------------------------------------
            DBNSamplingTrainer(const DBNSamplingTrainer& trainer);

            DBNSamplingTrainer& operator=(const DBNSamplingTrainer& trainer);

            DBNSamplingTrainer(DBNSamplingTrainer&&) = default;

            DBNSamplingTrainer& operator=(DBNSamplingTrainer&&) = default;

            //------------------------------------------------------------------
            // Member functions
            //------------------------------------------------------------------
            void prepare() override;

            void fit(const EvidenceSet& training_data) override;

            void get_info(nlohmann::json& json) const override;

          private:
            //------------------------------------------------------------------
            // Member functions
            //------------------------------------------------------------------

            /**
             * Copies data members from another DBNSamplingTrainer.
             */
            void copy_trainer(const DBNSamplingTrainer& trainer);

            //------------------------------------------------------------------
            // Data members
            //------------------------------------------------------------------
            std::shared_ptr<gsl_rng> random_generator;

            std::shared_ptr<Sampler> sampler;

            int num_samples;
        };

    } // namespace model
} // namespace tomcat
