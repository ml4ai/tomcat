#pragma once

#include "Sampler.h"

namespace tomcat {
    namespace model {

        //------------------------------------------------------------------
        // Forward declarations
        //------------------------------------------------------------------

        //------------------------------------------------------------------
        // Structs
        //------------------------------------------------------------------

        /**
         * This class is responsible for estimating a DBN's parameters by
         * average over their samples generated by some sampler.
         */
        class DBNSamplingTrainer {
          public: // same pattern for protected and private in this order
            //------------------------------------------------------------------
            // Types, Enums & Constants
            //------------------------------------------------------------------

            //------------------------------------------------------------------
            // Constructors & Destructor
            //------------------------------------------------------------------
            DBNSamplingTrainer(std::shared_ptr<Sampler> sampler);

            ~DBNSamplingTrainer();

            //------------------------------------------------------------------
            // Copy & Move constructors/assignments
            //------------------------------------------------------------------

            // Copy constructor and assignment should be deleted to avoid
            // implicit slicing and loss of polymorphic behaviour in the
            // subclasses. To deep copy, the clone method must be used.
            DBNSamplingTrainer(const DBNSamplingTrainer&) = delete;

            DBNSamplingTrainer& operator=(const DBNSamplingTrainer&) = delete;

            DBNSamplingTrainer(DBNSamplingTrainer&&) = default;

            DBNSamplingTrainer& operator=(DBNSamplingTrainer&&) = default;

            //------------------------------------------------------------------
            // Operator overload
            //------------------------------------------------------------------

            //------------------------------------------------------------------
            // Static functions
            //------------------------------------------------------------------

            //------------------------------------------------------------------
            // Member functions
            //------------------------------------------------------------------
            void fit(std::shared_ptr<gsl_rng> random_generator, int num_samples);

            //------------------------------------------------------------------
            // Virtual functions
            //------------------------------------------------------------------

            //------------------------------------------------------------------
            // Pure virtual functions
            //------------------------------------------------------------------

            //------------------------------------------------------------------
            // Getters & Setters
            //------------------------------------------------------------------

          private:
            //------------------------------------------------------------------
            // Data members
            //------------------------------------------------------------------
            std::shared_ptr<Sampler> sampler;
        };

    } // namespace model
} // namespace tomcat
