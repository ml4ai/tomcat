#!/bin/bash

set -u

# Set the TOMCAT environment variable, assuming that the directory structure
# mirrors that of the git repository.
TOMCAT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../" >/dev/null 2>&1 && pwd)"
export TOMCAT

# =============================================================================
# User-configurable environment variables
# =============================================================================
#
# Configuration environment variables that intended to allow the user to modify
# the behaviour of the run_session script by overriding the default values.
# This function should be called at least one time before any script or
# function that uses these variables is executed. 1 = true, 0 = false.
#
# We prefix a select few environment variables that could potentially conflict
# with someone's development environment with 'TOMCAT_'.
# =============================================================================

set_local_configuration() {
    # TOMCAT_DEBUG_LEVEL: Set this to 1 or more to get geeky output.
    export TOMCAT_DEBUG_LEVEL=${TOMCAT_DEBUG_LEVEL:-0}

    # TOMCAT_DEBUG_ECHO:  If TOMCAT_DEBUG_LEVEL is more than 0, this is an echo.
    if [[ ${TOMCAT_DEBUG_LEVEL} -gt 0 ]]; then
        export TOMCAT_DEBUG_ECHO="echo DEBUG: "
    else
        export TOMCAT_DEBUG_ECHO=": "
    fi

    # ENABLE_FFMPEG: Enable recording audio and video of player's face,
    # player's speech, player's screen, and system audio. Defaults to true.
    export ENABLE_FFMPEG=${ENABLE_FFMPEG:-1}

    # ENABLE_FILE_UPLOAD: Enable uploading player's data on to vision server.
    # Defaults to false.
    export ENABLE_FILE_UPLOAD=${ENABLE_FILE_UPLOAD:-0}

    # MAIN_MISSION: Set this to 1 for the Zombie invasion mission,
    #                           2 for the USAR Singleplayer mission, and
    #                           3 for a procedurally generated mission.
    export MAIN_MISSION=${MAIN_MISSION:-1}

    # If the main mission ID is set to 1 (USAR Singleplayer), then enable the
    # tutorial mission by default, since it is a tutorial for the Zombie
    # invasion mission.
    if [[ $MAIN_MISSION -eq 1 ]]; then
        # Enable the tutorial mission by default for the Zombie invasion.
        export DO_TUTORIAL_MISSION=${DO_TUTORIAL_MISSION:-1}
    else
        export DO_TUTORIAL_MISSION=0
    fi

    # Enable main mission. Defaults to true.
    export DO_MAIN_MISSION=${DO_MAIN_MISSION:-1}

    # Run Minecraft in full-screen mode. Defaults to true.
    export TOMCAT_FULL_SCREEN=${TOMCAT_FULL_SCREEN:-1}

    # RECYCLE_MINECRAFT: 0 for never, 1 for main mission, 2 for multiple runs.
    export RECYCLE_MINECRAFT=${RECYCLE_MINECRAFT:-1}

    # DEFAULT_MAIN_MISSION_TIME: Allows for short missions for testing.
    export DEFAULT_MAIN_MISSION_TIME=${DEFAULT_MAIN_MISSION_TIME:-600}

    # DIFFICULTY: Level of difficulty for mission. 3 for easy.
    #                                              5 for medium.
    #                                              7 for hard.
    export DIFFICULTY=${DIFFICULTY:-5}


    # PLAYER_ID - the id of the player who is running the mission. Defaults to
    # the value stored in the USER environment variable.
    export PLAYER_ID=${PLAYER_ID:-$USER}


    export TOMCAT_TMP_DIR="/tmp/$USER/tomcat"
    mkdir -p "${TOMCAT_TMP_DIR}"

    # On some systems, the 'rm' command is aliased to something else. So we take
    # the precaution of explicitly pointing rm to /bin/rm, and add the '-rf' flags
    # for convenience.

    export RM="/bin/rm -rf"
}

# Detect the OS, set some useful environment variables.
detect_os() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macOS detected."
        export MACOS_MINOR_VERSION=$(sw_vers -productVersion | cut -d '.' -f2)

        # We set the path to MacPorts so that users don't necessarily need to
        # mess with their ~/.bash_profile.
        export PATH="$PATH:/opt/local/bin:/opt/local/sbin"

        if (( MACOS_MINOR_VERSION < 15 )); then
            echo "macOS version older than 10.15 (Catalina). "\
                "System audio recording will be disabled."
            export ENABLE_SYSTEM_AUDIO_RECORDING=0
        else
            export ENABLE_SYSTEM_AUDIO_RECORDING=1
            export FFMPEG_FMT_SYSTEM_AUDIO=avfoundation
        fi

        if (( ! $CI )); then
          # In a non-CI environment, we will set the TERMINAL_PROGRAM
          # environment variable to help with macOS AppleScripts.
            if [[ $TERM_PROGRAM == iTerm.app ]]; then
                export TERMINAL_PROGRAM="iTerm"
            elif [[ $TERM_PROGRAM == Apple_Terminal ]]; then
                export TERMINAL_PROGRAM="Terminal"
            fi
        fi

        # Checking if MacPorts is present.
        export MACPORTS_FOUND=`[ -x "$(command -v port)" ]; echo $?`
        export HOMEBREW_FOUND=`[ -x "$(command -v brew)" ]; echo $?`

        # We download OpenJDK 1.8.0_232-b09 since the later versions of OpenJDK
        # 1.8 do not work with malmo, and we don't want to deal with different
        export JAVA_HOME="$TOMCAT"/external/jdk8u232-b09/Contents/Home
    elif [[ "$OSTYPE" == "linux-gnu" ]]; then
        echo "Linux detected."
        export JAVA_HOME="$TOMCAT"/external/jdk8u232-b09/
      else
        echo "OSTYPE is not darwin* or linux-gnu. Most likely this operating "\
             "system is not supported. Exiting now."
        exit 1
    fi

}

# Configure ffmpeg options for the webcam.
__configure_webcam() {
    if [[ $OSTYPE == "darwin"* ]]; then

        export FFMPEG_FMT_WEBCAM=avfoundation

        if [[ ! $(ffmpeg -f avfoundation -list_devices true -i "" 2>&1  \
                    | grep "\[1\] FaceTime HD Camera (Display)") == "" ]]; then

            echo "The script has detected that you have connected an external "\
                "display with a built-in webcam, setting the ffmpeg webcam input "\
                "device to '1:'."
            # TODO Have Mihai test this out with his external display.

            export FFMPEG_INPUT_DEVICE_WEBCAM="1:"
        else
            export FFMPEG_INPUT_DEVICE_WEBCAM="0:"
        fi
    elif [[ "$OSTYPE" == linux-gnu ]]; then
        export FFMPEG_FMT_WEBCAM=v4l2
        export FFMPEG_INPUT_DEVICE_WEBCAM=/dev/video0
    fi
}

# Configure ffmpeg options for audio recording (microphone and system audio).
__configure_audio_recording() {
    if [[ $OSTYPE == "darwin"* ]]; then

        export FFMPEG_FMT_MICROPHONE=avfoundation
        if [[ ! $(ffmpeg -f avfoundation -list_devices true -i "" 2>&1  \
                  | grep "\[0\] Display Audio") == "" ]]; then
            echo "The script has detected that you have connected an external "\
                 "display with a built-in microphone, audio recording might not "\
                 "work properly."
        fi

        if (( ENABLE_SYSTEM_AUDIO_RECORDING )); then
            # The default input microphone would normally be ":0", but since we
            # have installed BlackHole to record system audio, the input device
            # corresponding to the microphone is ":1".
            export FFMPEG_INPUT_DEVICE_MICROPHONE=":1"
            export FFMPEG_INPUT_DEVICE_SYSTEM_AUDIO=":0"
        else
            export FFMPEG_INPUT_DEVICE_MICROPHONE=":0"
        fi

    elif [[ $OSTYPE == linux-gnu ]]; then
        echo "System audio recording for Linux using pacat."
        export ENABLE_SYSTEM_AUDIO_RECORDING=1
        export FFMPEG_FMT_MICROPHONE=alsa
        export FFMPEG_INPUT_DEVICE_MICROPHONE=default
    else
        echo "Unsupported OS: " $OSTYPE
        exit 1
    fi
}

__configure_screen_capture() {
    if [[ $OSTYPE == "darwin"* ]]; then
        export SCREEN_DIMENSIONS=$(\
            osascript -e \
            'tell application "Finder" to get bounds of window of desktop' \
            | sed 's/, /x/g' | cut -d'x' -f3,4)
        export FFMPEG_FMT_SCREEN_CAPTURE=avfoundation
        local index=$(ffmpeg -f avfoundation -list_devices true -i "" 2>&1  \
                      | grep "Capture screen" \
                      | cut -d '[' -f3 | cut -d ']' -f1)
        export FFMPEG_INPUT_DEVICE_SCREEN_CAPTURE="${index}:"
    elif [[ $OSTYPE == linux-gnu ]]; then
        export SCREEN_DIMENSIONS=$(xdpyinfo | grep dimensions | awk '{print $2;}')
        export FFMPEG_FMT_SCREEN_CAPTURE=x11grab
        export FFMPEG_INPUT_DEVICE_SCREEN_CAPTURE=":0.0"
    else
        echo "Unsupported OS:" $OSTYPE
        exit 1
    fi
}

# Kobus: set_local_configuration() needs to be called before this one.
# Detect whether we are running in a continuous integration environment or not.
detect_ci() {
    # GITHUB_ACTIONS: Set to true with Github Actions is running the workflow.
    # (https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables)
    if [[ ${GITHUB_ACTIONS:-false} == true ]]; then
        export CI=1
    else
        export CI=0
    fi
    if (( CI )); then
        export TIME_LIMIT=1
        export DO_TUTORIAL_MISSION=0
        export MISSION=external/malmo/sample_missions/default_flat_1.xml
        export ENABLE_FFMPEG=0
        export ENABLE_FILE_UPLOAD=0
    else
        export TIME_LIMIT=${DEFAULT_MAIN_MISSION_TIME}
    fi
}

__test_ffmpeg_recording() {
    if [[ $OSTYPE == "darwin"* ]]; then
        echo "Checking if webcam video recording works..."
        . "${TOMCAT}"/tools/macos/test_webcam
        test_webcam_macos

        if (( ENABLE_SYSTEM_AUDIO_RECORDING )); then
            echo "Checking if system audio recording is set up..."
            if ! "${TOMCAT}"/tools/macos/test_system_audio_recording; then
              exit 1;
            fi
        fi

        echo "Testing terminal access to microphone..."

        source "${TOMCAT}"/tools/macos/test_microphone
        test_microphone_macos

        # Kobus says this does not work on my dual display, although it works
        # with either case alone. Obviously a corner case, but worth noting in
        # case it points us to a more robust solution.

        echo "Testing screen capture..."
        if ! "${TOMCAT}"/tools/macos/test_screen_recording; then exit 1; fi
    elif [[ $OSTYPE == linux-gnu ]]; then
        echo "Not testing ffmpeg yet on Linux."
    else
        echo "Unsupported OS:" $OSTYPE
        exit 1
    fi
}

configure_session() {
    set_local_configuration
    detect_ci
    detect_os
    if (( ENABLE_FFMPEG )); then
        __configure_webcam
        __configure_audio_recording
        __configure_screen_capture
        __test_ffmpeg_recording
    else
        export ENABLE_SYSTEM_AUDIO_RECORDING=0
    fi

    if [[ ${ENABLE_SYSTEM_AUDIO_RECORDING} -eq 1 ]]; then
        if [[ $OSTYPE == "darwin"* ]]; then
            export ORIGINAL_OUTPUT_DEVICE=$(SwitchAudioSource -c)
            if [[ ! $ORIGINAL_OUTPUT_DEVICE == "Multi-Output Device" ]]; then
                # Switching the audio output to the multi-output device if it
                # is not already active.
                if ! SwitchAudioSource -s "Multi-Output Device"; then
                    echo "Failed to switch audio source to Multi-Output Device."
                    echo "System audio recording will not work. Exiting now."
                    exit 1
                fi
            fi
        fi
    fi

    export DO_MAIN_MISSION=${DO_MAIN_MISSION:-1}
}
