#!/bin/bash

set -u

# Set the TOMCAT environment variable, assuming that the directory structure
# mirrors that of the git repository.
TOMCAT="$(cd "$( dirname "${BASH_SOURCE[0]}" )/../" >/dev/null 2>&1 && pwd)"
export TOMCAT

###############################################################################

source ${TOMCAT}/tools/configuration_helpers
set_local_configuration

detect_ci
detect_os

if ! "$TOMCAT"/tools/download_openjdk8; then
    echo "Failed to download OpenJDK 1.8.0_232-b09."
    exit 1
fi

__build_tomcat() {
    pushd "${TOMCAT}"
        echo "Building ToMCAT in `pwd`"

        /bin/rm -rf build
        mkdir build

        pushd build > /dev/null
            if (( CI )); then
                if [[ $OSTYPE == "linux-gnu" ]]; then
                    # On Github actions, the runner Ubuntu 18.04 has Boost 1.69
                    # installed, we set BOOST_ROOT=$BOOST_ROOT_1_69_0 to build
                    # tomcat with this version.
                    # We also disable the building of the facesensor executable
                    # on Ubuntu 18.04 as building it properly on 18.04 would
                    # require building OpenCV and and Dlib from source, which
                    # causes timeouts.
                    if [[ $DISTRO_MAJOR_VERSION -le 18 ]]; then
                        cmake ${TOMCAT} -DBOOST_ROOT=$BOOST_ROOT_1_69_0\
                                        -DBUILD_FACESENSOR=OFF
                        if [[ $? -ne 0 ]]; then exit 1; fi
                    else
                        cmake ${TOMCAT}
                        if [[ $? -ne 0 ]]; then exit 1; fi
                    fi
                else
                    # On the macOS Github Actions runner, there is a problem
                    # with building against OpenCV with Homebrew - something to
                    # do with XCode and the Command Line Tools not playing
                    # nicely together. The line below is a fix for this issue.
                    sudo xcode-select -s /Library/Developer/CommandLineTools
                    if ! cmake ${TOMCAT}; then exit 1; fi
                fi
            fi

            if [[ $OSTYPE == "linux-gnu" ]]; then
                    if ! make -j $(nproc); then exit 1; fi
                    if ! make -j $(nproc) Minecraft; then exit 1; fi
            else
                if ! make -j; then exit 1; fi
                if ! make -j Minecraft; then exit 1; fi
            fi
        popd > /dev/null
    popd > /dev/null
}

__download_tomcat_data() {
    if ! ${TOMCAT}/tools/download/tomcat_worlds; then exit 1; fi

    # We do not download the OpenFace models when running on a CI runner to save
    # time.
    if [[ $CI -eq 0 && ! -d ${TOMCAT}/data/OpenFace_models ]]; then
        if ! ${TOMCAT}/tools/download/OpenFace_models; then exit 1; fi
    fi
}

_install_tomcat() {
    if ! ${TOMCAT}/tools/install_dependencies; then exit 1; fi
    __build_tomcat
    __download_tomcat_data

    echo " "
    echo "Finished installing ToMCAT in ${TOMCAT}!"
    echo " "
}

_install_tomcat
exit 0
