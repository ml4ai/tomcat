#!/bin/bash

set -u

# Set the TOMCAT environment variable, assuming that the directory structure
# mirrors that of the git repository.
TOMCAT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../" >/dev/null 2>&1 && pwd)"
export TOMCAT

echo "Installing ToMCAT dependencies."

COMMON_MACOS_DEPS="cmake boost doxygen ffmpeg gradle mosquitto nlohmann-json openssl yaml-cpp dlib openblas"
__install_dependencies_using_macports() {
    echo "'port' executable detected, assuming that MacPorts"
    echo "(https://www.macports.org) is installed and is the package manager."

    echo "Installing ToMCAT dependencies using MacPorts. If you are prompted for"
    echo "a password, please enter the password you use to install software on"
    echo "your macOS computer."

    if ! sudo port selfupdate; then exit 1; fi

    local macports_deps="libfmt opencv4"
    for dep in $COMMON_MACOS_DEPS $macports_deps; do
        if ! sudo port -N install $dep; then
            echo "Unable to install $dep using MacPorts. Exiting."
            exit 1
        fi
    done

    # We enable system audio recording ononly on macOS Catalina or above
    if (( ENABLE_SYSTEM_AUDIO_RECORDING )); then
        if ! sudo port -N install blackhole switchaudio-osx; then exit 1; fi
    fi
}

__install_dependencies_using_homebrew() {
    echo "'brew' executable detected, assuming that Homebrew"\
    "(https://brew) is installed and is the package manager."

    echo "Installing ToMCAT dependencies using Homebrew."

    if ! brew update --verbose; then exit 1; fi

    local homebrew_deps="fmt opencv"
    for dep in $COMMON_MACOS_DEPS $homebrew_deps; do
        brew install $dep
        # We do not require exit codes for Homebrew installs to be 0 since
        # `brew install` can return an exit code of 1 when a package is already
        # installed (!!)

        if [[ $? -ne 0 && $? -ne 1 ]]; then
            echo "Unable to install $dep using Homebrew, exiting now."
            exit 1
        fi
    done

    # We enable system audio recording ononly on macOS Catalina or above
    if (( ENABLE_SYSTEM_AUDIO_RECORDING )); then
        brew cask install blackhole
        if [[ $? -ne 0 && $? -ne 1 ]]; then exit 1; fi

        brew install switchaudio-osx
        if [[ $? -ne 0 && $? -ne 1 ]]; then exit 1; fi
    fi

    if (( CI )); then
      # On a CI runner, we will install lcov to provide code coverage estimates.
      brew install lcov;
      if [[ $? -ne 0 && $? -ne 1 ]]; then exit 1; fi
    fi;

}

__install_dependencies_using_apt() {
    echo "apt-get executable found. Assuming that you are using a flavor of "\
          "Debian Linux, such as Ubuntu."
    echo ""
    echo "Installing dependencies using apt-get"

    if [[ $DISTRO == ubuntu && $DISTRO_MAJOR_VERSION -lt 20 ]]; then
        echo "Automatic installation of dependencies is only supported with"\
             "Ubuntu 20.04 or later, since the required libraries are not available"\
             "in recent enough versions using apt-get on earlier versions of Ubuntu."
        exit 1
    fi

    if ! sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test; then exit 1; fi

    if ! sudo apt-get update; then exit 1; fi

    sudo apt-get install -y --allow-downgrades\
        cmake \
        gcc-9 \
        libfmt-dev \
        doxygen \
        ffmpeg \
        wmctrl \
        mosquitto \
        mosquitto-clients \
        curl \
        libopenblas-dev \
        openssl \
        zlib1g-dev \
        libbz2-dev \
        libyaml-cpp-dev \
        libmosquitto-dev \
        libboost-all-dev \
        nlohmann-json3-dev \
        libopencv-dev
    if [[ $? -ne 0 ]]; then exit 1; fi

    # The versions of dlib available using apt are not compatible with
    # OpenCV 4, so we install the latest version from master.
    if ! "$TOMCAT"/tools/install_from_source/dlib; then
        echo "Failed to install dlib from source."
        exit 1
    fi
}

__install_dependencies() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macOS detected. Checking for macOS Command Line Tools."

        if [[ ! -d "/Library/Developer" ]]; then
            echo ""
            echo "[INFO]: The directory /Library/Developer was not found, so "\
                 "we assume that the macOS Command Line Tools are not installed."
            echo "Installing them now..."
            xcode-select --install
            "${TOMCAT}"/tools/macos/install_command_line_tools > /dev/null

            while [[ ! -d "/Library/Developer" ]]; do
                sleep 1
            done
            echo "macOS command line developer tools have been installed."
            echo ""
        fi

        echo "Checking for MacPorts or Homebrew package managers."

        if [[ $MACPORTS_FOUND -eq 1 && $HOMEBREW_FOUND -eq 1 ]]; then
            echo "Neither the MacPorts or Homebrew package managers have been "\
                 "detected. Proceeding to install MacPorts in the default "\
                 "location (/opt/local)"
            if ! "${TOMCAT}"/tools/install_from_source/macports; then exit 1; fi

            __install_dependencies_using_macports

        elif [[ $MACPORTS_FOUND -eq 0 && $HOMEBREW_FOUND -eq 1 ]]; then
            echo "Both Homebrew and MacPorts package managers have been found."
            echo "Proceeding to install dependencies using MacPorts."
            __install_dependencies_using_macports

        elif [[ $MACPORTS_FOUND -eq 1 && $HOMEBREW_FOUND -eq 0 ]]; then
            __install_dependencies_using_homebrew

        elif [[ $MACPORTS_FOUND -eq 0 && $HOMEBREW_FOUND -eq 0 ]]; then
            echo "Both the MacPorts (https://www.macports.org) and Homebrew"
            echo "(https://brew) package managers have been found. We assume you"
            echo "are a power user and can set your PATH environment variable as"
            echo "needed to switch between the two. We will proceed with installing"
            echo "the dependencies using MacPorts."
            __install_dependencies_using_macports
        fi

    elif [ -x "$(command -v apt-get)" ]; then
        __install_dependencies_using_apt

    else
        echo "This is not a macOS and not a Debian Linux distribution (at least"
        echo "apt-get is not around). We cannot proceed with the automated"
        echo "installation. Please consult docs/installation.md for the required"
        echo "dependencies."
        exit 1
    fi

    echo "ToMCAT dependency installation complete."
    echo " "
}

__install_dependencies

exit 0
