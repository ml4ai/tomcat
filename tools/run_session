#!/bin/bash

# =============================================================================

# For some reason, bash is behaving differently on Ubuntu and macOS, so we have
# to temporarily declaring certain variables to avoid unbound errors on Ubuntu
# if the user has not explicitly set the variable in their environment.
# We follow the convention of using lowercase for these temporary variables.

# GITHUB_ACTIONS: Set to true with Github Actions is running the workflow.
# (https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables)

github_actions="$GITHUB_ACTIONS"
enable_mqtt="$ENABLE_MQTT"

set -u

# After the set -u command, we export the uppercase versions of the temporary
# variables, ensuring that the user preferences are respected while avoiding
# unbound variable errors on Ubuntu.

export GITHUB_ACTIONS="${github_actions}"
export ENABLE_MQTT="${enable_mqtt}"

# =============================================================================

# Set the TOMCAT environment variable, assuming that the directory structure
# mirrors that of the git repository.
TOMCAT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../" >/dev/null 2>&1 && pwd)"
export TOMCAT

export TOMCAT_TMP_DIR="/tmp/$USER/tomcat"
mkdir -p "${TOMCAT_TMP_DIR}"

# On some systems, the 'rm' command is aliased to something else. So we take
# the precaution of explicitly pointing rm to /bin/rm.
export rm=/bin/rm

. "$TOMCAT"/tools/configure_session

# A function to handle cleanup when a user interrupts the script with Ctrl+C
user_interrupt() {
  echo "Detected keyboard interrupt."
  echo "Cleaning up now"
  "$TOMCAT"/tools/kill_minecraft
  if [[ "$OSTYPE"  == "darwin"* ]]; then
    # Switching the audio output from the multi-output device to the built-in
    # output.
    if ! SwitchAudioSource -s "Built-in Output"; then exit 1; fi
  fi
  if (( $ENABLE_MQTT )); then
    kill $pid_tail_malmo_json_data
  fi
  exit
}

trap user_interrupt SIGINT


# This function returns the date and time in the current timezone.
timestamp() {
  date "+%Y_%m_%d_%H_%M_%S"
}

if ! "$TOMCAT"/tools/check_minecraft; then exit 1; fi

export tutorial_mission_log="${TOMCAT_TMP_DIR}/tutorial_mission.log"
export zombie_invasion_log="${TOMCAT_TMP_DIR}/zombie_invasion.log"

export num_tries=2

if [[ "$OSTYPE" == "darwin"* ]]; then
  "$TOMCAT"/tools/macos/activate_minecraft_window ${terminal}
  if [[ $? -ne 0 ]]; then exit 1; fi
elif [[ "$OSTYPE" == "linux-gnu" && -z "$GITHUB_ACTIONS" ]]; then
  # wmctrl does not work well with xvfb-run, so we disable full-screening the
  # Minecraft window when running a headless test of this script with a Github
  # Actions runner.
  if ! "$TOMCAT"/tools/linux/activate_minecraft_window; then exit 1; fi
fi

if [[ ${do_tutorial} -eq 1 ]]; then 
  if ! "$TOMCAT"/tools/run_tutorial; then exit 1; fi
fi

# Get rid of any pre-existing discrete events JSON files.
$rm -f "${TOMCAT}"/external/malmo/Minecraft/run/saves/discrete_events/discrete_events.json

if [[ ${do_invasion} -eq 1 ]]; then
  echo " "
  echo "Running the Zombie invasion mission in ${TOMCAT}."
  echo " "

  try=0

  # Creating an output directory for this session.
  output_dir="${TOMCAT}"/data/participant_data/session_$(timestamp)
  mkdir -p "${output_dir}"

  # On a Github actions runner, there is no webcam, microphone or speaker.
  if [[ -z "$GITHUB_ACTIONS" ]]; then
      echo "Recording video of player's face using webcam."
      ffmpeg\
        -f ${ffmpeg_fmt_webcam}\
        ${framerate_option}\
        -i ${ffmpeg_input_device_webcam}\
        "${output_dir}"/webcam_video.mpg &> /dev/null &
      pid_webcam_recording=$!
      
      echo "Recording player audio using microphone."
      ffmpeg\
        -nostdin\
        -f ${ffmpeg_fmt_microphone}\
        -i ${ffmpeg_input_device_microphone}\
        "${output_dir}"/player_audio.wav &> /dev/null &
      pid_microphone_recording=$!

      if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "Recording system audio."
        ffmpeg\
          -nostdin\
          -f ${ffmpeg_fmt_system_audio}\
          -i ${ffmpeg_input_device_system_audio}\
          "${output_dir}"/system_audio.wav &> "$TOMCAT_TMP_DIR"/system_audio_recording.log &
        pid_system_audio_recording=$!
      elif [[ "$OSTYPE" == "linux-gnu" ]]; then
        echo "System audio recording not yet enabled for Linux."
      fi
  fi

  # Recording game screen.
  echo "Recording player's screen."
  screen_video="${output_dir}"/screen_video.mpg
  ffmpeg -nostdin -f ${ffmpeg_fmt_screen_capture}\
    -i ${ffmpeg_input_device_screen_capture}\
    -s $dimensions\
    "$screen_video" &> "$TOMCAT_TMP_DIR"/screen_video_recording.log &
  pid_screen_recording=$!

  malmo_json_data="${output_dir}"/malmo_data.json
  touch "$malmo_json_data"

  if (( $ENABLE_MQTT )); then
    tail -f -n1 "$malmo_json_data" | mosquitto_pub -t observations/state -l &
    pid_tail_malmo_json_data=$!
  fi

  while [ $try -lt $num_tries ]; do
    "${TOMCAT}"/build/bin/runExperiment \
      --mission ${mission} \
      --time_limit ${time_limit} \
      --record_observations \
      &> "${zombie_invasion_log}" \
      >"${output_dir}"/malmo_data.json &
    pid_runExperiment=$!

    echo "Running ${TOMCAT}/build/bin/runExperiment"
    echo "    --mission ${mission}"
    echo "    --time_limit ${time_limit}"
    echo "    --record_observations"
    echo "    &> ${zombie_invasion_log}"
    echo "    > "${output_dir}"/malmo_data.json &"
    echo "Process ID corresponding to ./bin/runExperiment is $pid_runExperiment"
    echo "... waiting for it to complete."

    wait $pid_runExperiment
    zombie_invasion_status=$?

    if [[ ${zombie_invasion_status} -eq 0 ]]; then
      zombie_invasion_status=$(grep -c "Error starting mission" \
      "${zombie_invasion_log}")
    fi

    if [[ ${zombie_invasion_status} -eq 0 ]]; then
      echo "Zombie invasion mission ended with exit code 0."
      echo "All recorded data is in ${output_dir}"
      echo " "
      break
    fi

    (( try++ ))

    if [[ $try -lt $num_tries ]]; then
      echo "Zombie invasion mission ended with exit code 1."
      echo "Killing all Minecraft and Malmo processes that can be found"
      echo "and trying again."

      "$TOMCAT"/tools/kill_minecraft
      "$TOMCAT"/tools/check_minecraft
    fi
  done
fi

if [[ -z "$GITHUB_ACTIONS" ]]; then
  kill $pid_webcam_recording
  kill $pid_microphone_recording
  kill $pid_screen_recording
  if [[ "$OSTYPE"  == "darwin"* ]]; then
    kill $pid_system_audio_recording
    # Switching the audio output from the multi-output device to the built-in
    # output.
    if ! SwitchAudioSource -s "Built-in Output"; then exit 1; fi
  fi
fi


discrete_actions_file="${TOMCAT}"/external/malmo/Minecraft/run/saves/discrete_events/discrete_events.json

if [[ -f "${discrete_actions_file}" ]]; then
  mv "${discrete_actions_file}" "${output_dir}"/discrete_events.json
fi

# Move the self-reports from the Minecraft folder to the participant data folder
mv "${TOMCAT}"/external/malmo/Minecraft/run/saves/self_reports/* "${output_dir}"

echo "Finished running all sessions in ${TOMCAT}".
exit 0
