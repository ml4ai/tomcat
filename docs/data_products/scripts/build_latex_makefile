#!/bin/tcsh

# This script takes one optional argument which is a build directory, which is
# typically "build".

# This hack of old latex build files might be obsolete? There is limited mileage
# in using make for latex, as typically we do not have conditional compilation.
# The standard script latexmk superficially behaves like make but misses
# dependencies such as figures in subdirectories and files found in TEXINPUTS.
# However, using 'latexmk -g' forces compiling, which might be the right answer
# for latex. 
#
# TODO: It seems figure suffix is needed, at least for pdf? 
#
# TODO: A really good job on this would entail understanding when the makefile
# is out of date, which basically means doing the same thing as we do for code
# (checking for the addition of *.tex files, following includes to see if they
# have changed, etc.) It might be possible to augment the build system with
# different concepts source files and includes, or at least some of the pieces.
# An simpler but less elegant alternative is to have Makefile call build which
# always builds the Makefile-2 then calls it. This could make sense, as we do
# not do it this way for code mostly because it is expensive, but it need not be
# so expensive for latex. 

if ($# == 0) then
    set build_dir="" 
else 
    set build_dir = `echo "${1}" | sed 's#/*$##'`
    set build_dir = "${build_dir}"/
endif 

echo "build_dir: ${build_dir}"

# Places to look for included files, which are treated as dependencies.
set locations = "./"

cat /dev/null > Makefile.new 

if (${?TEXINPUTS}) then
    set texinputs = `echo ${TEXINPUTS} | sed 's/:/ /g' `
else 
    set texinputs = ""
endif 

foreach texinput (${texinputs}) 
    set texinput_slash = `echo ${texinput}/ |sed 's#//*$#/#' `  

    set found = 0

    foreach location (${locations})
        if ("${location}" == "${texinput_slash}") then 
            set found =  1
            break
        endif 
    end

    if (! ${found}) then
        set locations = "${locations} ${texinput_slash}"
    endif 
end

echo "Script build_latex_makefile locations: ${locations}" 

set count = 0
set main_root_names = ""

set locations_no_slash = `echo ${locations} | sed 's#//* # #' | sed 's#//*$##'`
# echo locations_no_slash: $locations_no_slash
set tex_files = `find ${locations_no_slash} -maxdepth 1 -name '*.tex' | sed 's#^\./##'`
# echo tex_files: $tex_files

foreach tex_file ($tex_files) 
    set is_main = `grep -c '^ *\\begin *{ *document *}' ${tex_file}`

    if (${is_main}) then 
        set root_name = `echo ${tex_file} | sed 's/\.tex *$//'`
        set main_root_names = "${main_root_names} ${root_name}"
    endif
end 

if ("${main_root_names}" == "") then
    ${P_STDERR} "No main latex file found in `pwd`."
    ${P_STDERR} "There are either no .tex files or none of them have a '\begin{document}'."
    exit 1 
endif 

set all = "all:"

foreach main_root_name (${main_root_names})
    set all = "${all} ${main_root_name}.pdf"
end

echo "$all" >> Makefile.new
echo " "  >> Makefile.new

if (-e "./scripts/do_latex") then 
    set do_latex = "./scripts/do_latex"
else 
    set do_latex = "do_latex"
endif 

set clean_list = ""
foreach main_root_name (${main_root_names})
    if ("${build_dir}" != "") then 
        echo "${main_root_name}.pdf : ${build_dir}${main_root_name}.pdf" >> Makefile.new
        echo "	cp -f ${build_dir}${main_root_name}.pdf ${main_root_name}.pdf" >> Makefile.new
        echo " " >> Makefile.new
        set clean_list = "${clean_list} ${main_root_name}.pdf"
    endif 

    echo "${build_dir}${main_root_name}.pdf : ${main_root_name}.tex" >> Makefile.new
    echo "	${do_latex} ${main_root_name}.tex ${build_dir}" >> Makefile.new
    echo " " >> Makefile.new
    set clean_list = "${clean_list} ${build_dir}${main_root_name}.pdf ${build_dir}${main_root_name}.aux ${build_dir}${main_root_name}.out ${build_dir}${main_root_name}.log"
end

foreach tex_file ($tex_files) 
    # echo tex_file: $tex_file 

    set depends_on = ""

    # For input and include, generally we can either use "x.tex" or "x", so we
    # strip the .tex which might not be there, and add it back in again. 
    
    set depends_on_1 = `grep '^ *\\input *{.*}' ${tex_file} | sed 's/^ *\\input *{ *\(.*\) *}.*/\1/' | sed 's/\.tex$//' | sed 's/$/.tex/'`
    if ("${depends_on_1}" != "") then 
        foreach depends_on_1_file (${depends_on_1})
            # The ":0" means that we do not need to add a suffix. It gets
            # stripped out below. 
            set depends_on = "${depends_on} ${depends_on_1_file}:0"
        end
    endif 

    set depends_on_2 = `grep '^ *\\include *{.*}' ${tex_file} | sed 's/^ *\\include *{ *\(.*\) *}.*/\1/' | sed 's/\.tex$//' | sed 's/$/.tex/'`
    if ("${depends_on_2}" != "") then 
        foreach depends_on_2_file (${depends_on_2})
            # The ":0" means that we do not need to add a suffix. It gets
            # stripped out below. 
            set depends_on = "${depends_on} ${depends_on_2_file}:0"
        end
    endif 

    # For verbatim inputs, we cannot do the stripping and replacement of .tex,
    # as these files often are not *.tex. 
    #
    set depends_on_1v = `grep '^ *\\verbatiminput *{.*}' ${tex_file} | sed 's/^ *\\verbatiminput *{ *\(.*\) *}.*/\1/'`
    if ("${depends_on_1v}" != "") then 
        foreach depends_on_1v_file (${depends_on_1v})
            # The ":0" means that we do not need to add a suffix. It gets
            # stripped out below. 
            set depends_on = "${depends_on} ${depends_on_1v_file}:0"
        end
    endif 

    # Graphics is tricky. Which extensions are allowed depends on which flavor
    # of latex is being run. We will assume pdflatex below if there is no TLA
    # suffix. 
    
    set depends_on_3 = `grep '^ *\\includegraphics[^{].*{.*}' ${tex_file} | sed 's/^ *\\includegraphics[^{].*{ *\(.*\) *}.*/\1/'`
    if ("${depends_on_3}" != "") then 
        foreach depends_on_3_file (${depends_on_3})
            set have_tla_suffix = `echo ${depends_on_3_file} | grep -c '\.[a-zA-Z]..$'`

            if (${have_tla_suffix}) then
                set depends_on = "${depends_on} ${depends_on_3_file}:0"
            else 
                set depends_on = "${depends_on} ${depends_on_3_file}:1"
            endif 
        end
    endif 

    # echo depends_on: $depends_on

    set depends_on_paths = ""

    # This list and its order can be set via \DeclareGraphicExtensions.  The
    # latex variable is: \Gin@extensions. Perhaps we need to get fancier here. 
    set graphics_suffixes = "NULL .pdf .jpg .png .eps"

    foreach depends_on_file (${depends_on})
        # echo tex_file: $tex_file depends_on_file: $depends_on_file
        set found =  0

        set need_tla_suffix = `echo ${depends_on_file} | grep -c ':1$'`
        set depends_on_file = `echo ${depends_on_file} | sed 's/:.$//'`

        foreach graphics_suffix (${graphics_suffixes})
            if (${need_tla_suffix}) then
                if ("${graphics_suffix}" == "NULL") then 
                    continue
                endif 
            else 
                if ("${graphics_suffix}" == "NULL") then
                    set graphics_suffix = ""
                else 
                    break
                endif 
            endif 

            foreach location (${locations})
                # echo ${tex_file} : ${location}${depends_on_file}${graphics_suffix}
                if (-e ${location}${depends_on_file}${graphics_suffix}) then
                    if ("${location}" == "./") then
                        set location = ""
                    else
                        # We set the location of the textinputs directory
                        # location to ../ if it is there, or $HOME if it is
                        # there. The first works for the manifesto if we are
                        # following the directory structure in svn. This is too
                        # brittle for the long run. 
                        
                        # echo location: $location
                        pushd location > /dev/null
                            set location = `pwd`/
                            # echo location_path: $location_path
                        popd > /dev/null

                        pushd .. > /dev/null
                            set parent_path = `pwd`/
                            # echo parent_path: $parent_path
                        popd > /dev/null

                        set location = `echo ${location} | sed "s#${parent_path}#../#"`
                        # echo location: $location

                        set home_str = '$(HOME)'
                        set location = `echo ${location} | sed "s#${HOME}#${home_str}#"`
                    endif 

                    set depends_on_paths = "${depends_on_paths} ${location}${depends_on_file}${graphics_suffix}"
                    set found =  1
                    break
                endif 
            end

            if (${found}) break
        end

        if (! ${found}) then
            ${P_STDERR} ""
            ${P_STDERR} "Warning from script build_latex_makefile running in `pwd`."
            ${P_STDERR} "Unable to find dependency ${depends_on_file} in current directory or TEXINPUTS."
            ${P_STDERR} "Things will likely break unless this is sorted out."
            ${P_STDERR} "" 
        endif 
    end 

    if ("${depends_on_paths}" != "") then 
        echo ${tex_file} : ${depends_on_paths}  >> Makefile.new
        echo "	touch ${tex_file}"  >> Makefile.new
        echo "" >> Makefile.new
    endif 
end

echo ".PHONY clean : " >> Makefile.new
echo "	rm -f ${clean_list}" >> Makefile.new

if (-e Makefile) then
    echo "Moving previous Makefile to Makefile.old"
    /bin/mv -f  Makefile Makefile.old
endif 

/bin/mv -f  Makefile.new Makefile

