#!/bin/tcsh

# This script takes one optional argument which is a build directory, which is
# typically "build". Currently, we force it to be "build" if it is not
# specified.

# This hack of old latex build files might be obsolete? There is limited mileage
# in using make for latex, as typically we do not have conditional compilation.
# The standard script latexmk superficially behaves like make but misses
# dependencies such as figures in subdirectories and files found in TEXINPUTS.
# However, using 'latexmk -g' forces compiling, which might be the right answer
# for latex. 
#
# TODO: It seems figure suffix is needed, at least for pdf? 
#
# TODO: A really good job on this would entail understanding when the makefile
# is out of date, which basically means doing the same thing as we do for code
# (checking for the addition of *.tex files, following includes to see if they
# have changed, etc.) It might be possible to augment the build system with
# different concepts source files and includes, or at least some of the pieces.
# An simpler but less elegant alternative is to have Makefile call build which
# always builds the Makefile-2 then calls it. This could make sense, as we do
# not do it this way for code mostly because it is expensive, but it need not be
# so expensive for latex. 

if ($# == 0) then
    set build_dir="build/" 
else 
    set build_dir = `echo "${1}" | sed 's#/*$##'`
    set build_dir = "${build_dir}"/
endif 

echo "build_dir: ${build_dir}"

# Places to look for included files, which are treated as dependencies.
set locations = "./"

cat /dev/null > Makefile.new 

if (${?TEXINPUTS}) then
    set texinputs = `echo ${TEXINPUTS} | sed 's/:/ /g' `
else 
    set texinputs = ""
endif 

foreach texinput (${texinputs}) 
    set texinput_slash = `echo ${texinput}/ |sed 's#//*$#/#' `  

    set found = 0

    foreach location (${locations})
        if ("${location}" == "${texinput_slash}") then 
            set found =  1
            break
        endif 
    end

    if (! ${found}) then
        set locations = "${locations} ${texinput_slash}"
    endif 
end

echo "Script build_latex_makefile locations: ${locations}" 

set locations_no_slash = `echo ${locations} | sed 's#//* # #' | sed 's#//*$##'`
# echo locations_no_slash: $locations_no_slash
set tex_files = `find ${locations_no_slash} -maxdepth 1 -name '*.tex' | sed 's#^\./##'`
set tex_files = `find . -maxdepth 1 -name '*.tex' | sed 's#^\./##'`
echo tex_files: $tex_files

set main_tex_files = ""
set main_root_names = ""

foreach tex_file ($tex_files) 
    set is_main = `grep -c '^ *\\begin *{ *document *}' ${tex_file}`

    if (${is_main}) then 
        set root_name = `echo ${tex_file} | sed 's/\.tex *$//'`
        set main_root_names = "${main_root_names} ${root_name}"
        set main_tex_files = "${main_tex_files} ${tex_file}"
    endif
end 

if ("${main_root_names}" == "") then
    ${P_STDERR} "No main latex file found in `pwd`."
    ${P_STDERR} "There are either no .tex files or none of them have a '\begin{document}'."
    exit 1 
endif 

echo "# This Makefile is build by the script build_latex_makefile. " >> Makefile.new
echo "# Manual changes will be overwitten. " >> Makefile.new
echo " " >> Makefile.new

echo ".PHONY : all " >> Makefile.new
set all = "all :"

set first_root_name = ""
foreach main_root_name (${main_root_names})
    set all = "${all} ${main_root_name}.pdf"

    if ("${first_root_name}" == "") then 
        set first_root_name = "${main_root_name}"
    endif 
end

echo "$all" >> Makefile.new
echo " "  >> Makefile.new

if (-e "./scripts/do_latex") then 
    set do_latex = "./scripts/do_latex"
else 
    set do_latex = "do_latex"
endif 

set clean_list = ""
foreach main_root_name (${main_root_names})
    if ("${build_dir}" != "") then 
        echo "${main_root_name}.pdf : ${build_dir}${main_root_name}.pdf" >> Makefile.new
        echo "	cp -f ${build_dir}${main_root_name}.pdf ${main_root_name}.pdf" >> Makefile.new
        echo " " >> Makefile.new
        set clean_list = "${clean_list} ${main_root_name}.pdf"
    endif 

    echo "${build_dir}${main_root_name}.pdf : ${main_root_name}.tex" >> Makefile.new
    echo "	${do_latex} ${main_root_name}.tex ${build_dir}" >> Makefile.new
    echo " " >> Makefile.new
    set clean_list = "${clean_list} ${build_dir}${main_root_name}.pdf ${build_dir}${main_root_name}.aux ${build_dir}${main_root_name}.out ${build_dir}${main_root_name}.log"
end

foreach tex_file ($main_tex_files) 
    build_latex_makefile_2 "${tex_file}" "${locations}" 
    set helper_status = ${status}
    if (${helper_status}) then
        ${P_STDERR} "Script build_latex_makefile_2 exited with status ${helper_status}."
        ${P_STDERR} "Exiting with error status ${helper_status}."
        exit ${helper_status}
    endif 
end 

echo ".PHONY : clean" >> Makefile.new
echo "clean : " >> Makefile.new
echo "	rm -f ${clean_list}" >> Makefile.new

# For Adarsh. This hacking has issues. 
echo "" >> Makefile.new
echo ".PHONY : watch" >> Makefile.new
echo "watch : " >> Makefile.new
set dollar = '$'
echo "	latexmk -pdflatex -pvc -e '${dollar}${dollar}pdf_previewer=q[open -a Skim]' -outdir=${build_dir} ${first_root_name}.tex" >> Makefile.new

if (-e Makefile) then
    echo "Moving previous Makefile to Makefile.old"
    /bin/mv -f  Makefile Makefile.old
endif 

/bin/mv -f  Makefile.new Makefile

