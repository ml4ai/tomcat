#!/bin/tcsh 

##############################################################################
#
# Identification:
#     A script to 
#
# Description:
#     This script 
#
# Option arguments: 
#
# |    (The bar stops next line from joining) 
#         Indented
#
# Examples (more to come):
#     blah blah blah
#
# Bugs/deficiencies
#
# Author:
#     Kobus Barnard 
#
##############################################################################

if (! $?REPO_SYNC_RECURSION_PREFIX) then 
    ${P_STDERR} "REPO_SYNC_RECURSION_PREFIX was not set entering repo_sync_with_external_2"
    setenv REPO_SYNC_RECURSION_PREFIX ""
    setenv IVI_OUTPUT_PREFIX "${REPO_SYNC_RECURSION_PREFIX}"
endif 

set num_args = ${#argv}

if (${num_args} != 2) then
    ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}Script repo_sync_with_external_2 needs exactly 2 parameters."
    ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}A direction (to/from) and a external repo label (ivilab/delphi)."
    exit 1
endif 

set direction = "$1"

if ("${direction}" == "to") then 
    set to=1
else if ("${direction}" == "from") then 
    set to=0
else 
    ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}Script repo_sync_with_external_2 direction needs to be either 'to' or 'from'"
    exit 1
endif 

set external_label = "$2"
set repo_home = `echo "${external_label}" | sed 's/^\([^_]*\)_.*$/\1/'`
set repo_name = `echo "${external_label}" | sed 's/^[^_]*_\(.*\)$/\1/'`
set script_status = 0

cd /home/ivilab/repo_sync

set have_changes =  0
set changed_svn_dirs = () 
set changed_external_dirs = () 

echo " "
echo "${REPO_SYNC_RECURSION_PREFIX}XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
echo "${REPO_SYNC_RECURSION_PREFIX}Script repo_sync_with_external_2 processing ->${direction}<- external entity ${external_label}"
echo "${REPO_SYNC_RECURSION_PREFIX}Start time is `date`"
echo " "
echo "${REPO_SYNC_RECURSION_PREFIX}KJB_SRC_PATH is: ${KJB_SRC_PATH}"
echo "${REPO_SYNC_RECURSION_PREFIX}MAKE_SCRIPT_PATH is: ${MAKE_SCRIPT_PATH}"
echo "${REPO_SYNC_RECURSION_PREFIX}P_STDERR is ${P_STDERR}"
echo " "
echo " "

set git_clone_dir = "${external_label}_git/${repo_name}"

if (! -d "${git_clone_dir}") then
    ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}Directory ${git_clone_dir} does not exist in `pwd`"
    exit 1
endif 

set svn_to_external_map = "${git_clone_dir}/svn_to_external_map.txt"

${VERBOSE_ECHO} "Reading svn_to_external_map: ${svn_to_external_map}"

if (! -r "${svn_to_external_map}") then
     ${P_STDERR} "File ${svn_to_external_map} not readable." 
     set script_status = 1
     goto cleanup
endif 

set svn_dirs=`cat ${svn_to_external_map} | grep -v '^ *#' | grep -v '^ $$' | sed 's/  */ /g' | cut -d ' ' -f 1`
set external_dirs=`cat ${svn_to_external_map} | grep -v '^ *#' | grep -v '^ $$' | sed 's/  */ /g' | cut -d ' ' -f 2`

if ($#svn_dirs != $#external_dirs) then
    ${P_STDERR} "Error parsing $3."
    ${P_STDERR} "Symptom: Unequal numbers of svn_dirs and external_dirs"
    set script_status = 1
    goto cleanup
endif 

set num_dirs = $#svn_dirs
echo num_dirs: $num_dirs


set count =  1
while (${count} <= ${num_dirs})
    set svn_dir = $svn_dirs[$count]
    set external_dir = $external_dirs[$count]

echo svn_dir: $svn_dir
echo external_dir: $external_dir

    @ count += 1

    ${VERBOSE_ECHO} "${REPO_SYNC_RECURSION_PREFIX}--------------------------------------------------------------------------------------"
    ${VERBOSE_ECHO} "${REPO_SYNC_RECURSION_PREFIX}Script repo_sync_with_external_2 processing svn dir ${svn_dir}"
    ${VERBOSE_ECHO} " "

    if (${to}) then
        ${VERBOSE_ECHO} "${REPO_SYNC_RECURSION_PREFIX}Script repo_sync_with_external_2 executing make_svn_dirs_non_empty local_staging/src/${svn_dir}"
        make_svn_dirs_non_empty local_staging/src/${svn_dir} 
        if (${status}) then
            ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}Command failed in `pwd`: make_svn_dirs_non_empty local_staging/src/${svn_dir}"
            ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}    Skipping sync of ${svn_dir} with respect to external entity ${external_label}."
            set script_status = 1
            continue
        endif

        # I have programmed myself into a bit of a corner. We do not know which
        # of the choices of commit (git direct, or external) that will be be
        # used by the repo_sync_external_dir script. But if either of them gets
        # a repo_changed.flag, then we have a changed repo. So we do both. 
        ${KJB_RM} ${external_label}_external/ivi/${svn_dir}/repo_changed.flag
        ${KJB_RM} ${git_clone_dir}/${external_dir}/repo_changed.flag

        # First arg is direction. It is easiest to tell repo_sync_external_dir
        # the direction, even though the original plan was that this file
        # arranged things soley by order of source and target. 
        set to_cmd = "repo_sync_external_dir 1 ${external_label}_local/src/${svn_dir} ${external_label}_external/ivi/${svn_dir} ${git_clone_dir}/${external_dir} ivilab-sync"

        ${VERBOSE_ECHO} "${REPO_SYNC_RECURSION_PREFIX}Executing command in `pwd`"
        ${VERBOSE_ECHO} "${REPO_SYNC_RECURSION_PREFIX}    ${to_cmd}"
        ${to_cmd}
        if (${status}) then
            ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}Command failed in `pwd`: "
            ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}    ${to_cmd}"
            ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}    Skipping sync of ${svn_dir} with respect to external entity ${external_label}."
            set script_status = 1
            continue
        endif

        if ((-e "${external_label}_external/ivi/${svn_dir}/repo_changed.flag") || (-e "${git_clone_dir}/${external_dir}/repo_changed.flag")) then
            set have_changes = 1
            set changed_svn_dirs = (${changed_svn_dirs} ${svn_dir})
            set changed_external_dirs = (${changed_external_dirs} ${external_dir}) 
        endif 
    else 
        ${KJB_RM} ${external_label}_local/src/${svn_dir}/repo_changed.flag

        # The first arg is direction. It is easiest to tell
        # repo_sync_external_dir the direction, even though the original plan
        # was that this file arranged things soley by order of source and
        # target. 
        set from_cmd = "repo_sync_external_dir 0 ${external_label}_external/ivi/${svn_dir} ${external_label}_local/src/${svn_dir} ${git_clone_dir}/${external_dir} ivilab-sync"
        ${VERBOSE_ECHO} "${REPO_SYNC_RECURSION_PREFIX}Script repo_sync_with_external_2 executing command in `pwd`"
        ${VERBOSE_ECHO} "${REPO_SYNC_RECURSION_PREFIX}    ${from_cmd}"

        ${from_cmd}
        if (${status}) then
            set script_status = 1
            ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}Command failed in `pwd`: "
            ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}    ${from_cmd}"
            continue
        endif

        if (-e "${external_label}_local/src/${svn_dir}/repo_changed.flag") then 
            set have_changes = 1
            set changed_svn_dirs = (${changed_svn_dirs} ${svn_dir})
            set changed_external_dirs = (${changed_external_dirs} ${external_dir})

        endif 

#       I assume this got fixed in repo_sync_external_dir, as it was commented
#       out. 
#
#         # Now we do the reverse direction for the sole reason that the commit to
#         # local might have incurred changes to the file because of property
#         # settings. For example, for the source files in lib we automatically
#         # insert an SVN ID string. 
#         #
#         ${VERBOSE_ECHO} "${REPO_SYNC_RECURSION_PREFIX}Doing the reverse direction in case the commit incurred changes."
#         ${VERBOSE_ECHO} "${REPO_SYNC_RECURSION_PREFIX}Executing repo_sync_external_dir ${external_label}_local/src/${sub_dir} ${external_label}_external/ivi/${sub_dir} ivilab-sync"
#         repo_sync_external_dir ${external_label}_local/src/${sub_dir} ${external_label}_external/ivi/${sub_dir} ivilab-sync
#         if (${status}) then
#             ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}Command failed in `pwd`: "
#             ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}    repo_sync_external_dir ${external_label}_local/src/${sub_dir} ${external_label}_external/ivi/${sub_dir} ivilab-sync."
#             ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}    Skipping sync of ${sub_dir} with respect to external entity ${external_label}."
#             set script_status = 1
#             continue
#         endif

    endif 

end

if (${script_status}) goto cleanup

echo 
echo "${REPO_SYNC_RECURSION_PREFIX}++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo 

set verify_repo_sync =  0

if ($?REPO_SYNC_FORCE_VERIFY) then
    ${VERBOSE_ECHO} "${REPO_SYNC_RECURSION_PREFIX}Verifying sync with external entity ${external_label} because REPO_SYNC_FORCE_VERIFY is set."
    set changed_svn_dirs = (${svn_dirs})
    set changed_external_dirs = (${external_dirs})
    set verify_repo_sync =  1
else if ($?REPO_SYNC_SKIP_VERIFY) then
    ${VERBOSE_ECHO} "${REPO_SYNC_RECURSION_PREFIX}Skipping verifying sync with external entity ${external_label} because REPO_SYNC_SKIP_VERIFY is set."
else if (${have_changes}) then
    ${VERBOSE_ECHO} "${REPO_SYNC_RECURSION_PREFIX}Verifying sync with external entity ${external_label} because there were changes."
    set verify_repo_sync =  1
else
    ${VERBOSE_ECHO} "${REPO_SYNC_RECURSION_PREFIX}Skipping verifying sync with external entity as there were no changes and REPO_SYNC_FORCE_VERIFY is not set."
endif

if ($#changed_svn_dirs != $#changed_external_dirs) then
    ${P_STDERR} "Error setting up for verification."
    ${P_STDERR} "Symptom: Unequal numbers of changed_svn_dirs and changed_external_dirs"
    set script_status = 1
    goto cleanup
endif 

set num_changed_dirs = $#changed_svn_dirs
echo num_changed_dirs: $num_changed_dirs

if (${verify_repo_sync}) then
    ${VERBOSE_ECHO} "${REPO_SYNC_RECURSION_PREFIX}Verifying sub dirs: ${changed_svn_dirs}"

    setenv DIFF_IGNORE "repo_modify.cmd git_push.res svn_pre_commit_up.res repo_changed.flag"

    ${KJB_MKDIR} local_fresh

    if (${status}) then
        ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}Command failed in `pwd`: ${KJB_MKDIR} local_fresh"
        ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}Skipping verification of external entity ${external_label}."
        set script_status = 1
        goto cleanup
    endif
        
    pushd local_fresh > /dev/null
        if (-e src) then
            set time_str = `date '+%y-%m-%d-%H-%M'`
            ${KJB_MV} src src.${time_str}

            if (${status}) then
                ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}Command failed in `pwd`: ${KJB_MV} src src.${time_str}"
                ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}Skipping verification of external entity ${external_label}."
                set script_status = 1
            endif 
        endif 

        ${KJB_MKDIR} src
        if (${status}) then
            ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}Command failed in `pwd`: ${KJB_MKDIR} src"
            ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}Skipping verification of external entity ${external_label}."
            set script_status = 1
            goto cleanup
        endif
        
        pushd src > /dev/null
            foreach svn_dir (${changed_svn_dirs}) 
                svn co file:///home/svn/src/${svn_dir}/trunk ${svn_dir} > /dev/null
                if (${status}) then
                    ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}Command failed in `pwd`: svn co file:///home/svn/src/${svn_dir}/trunk ${svn_dir}"
                    ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}Skipping verification of external entity ${external_label}."
                    set script_status = 1
                    goto cleanup
                endif 
            end
        popd > /dev/null
    popd > /dev/null

    ${VERBOSE_ECHO} "${REPO_SYNC_RECURSION_PREFIX}Got a fresh copy into local_fresh. "

    ########################################################################################

    # ${VERBOSE_ECHO} "Initializing have_viable_fresh_external to 0"
    set have_viable_fresh_external = 0

    ${KJB_RM} ${external_label}_external_fresh
    if (${status}) then
        ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}Command failed in `pwd`: ${KJB_RM} ${external_label}_external_fresh"
        ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}${KJB_RM} ${external_label}_external_fresh failed."
    else
        ${KJB_MKDIR} ${external_label}_external_fresh
        if (${status}) then
            ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}Command failed in `pwd`: ${KJB_MKDIR} ${external_label}_external_fresh"
            ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}${KJB_MKDIR} ${external_label}_external_fresh failed."
        else
            pushd ${external_label}_external_fresh > /dev/null
                svn co file:///home/svn/external/${repo_home}/${repo_name} ivi > /dev/null
                if (${status}) then
                    ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}Command failed in `pwd`: svn co file:///home/svn/external/${repo_home}/${repo_name} ivi"
                else 
                    pushd ivi > /dev/null
                        set error_found = 0

                        cat /dev/null  > sub_dir_external.txt
                        foreach svn_dir (${changed_svn_dirs})
                            grep < externals.txt "${svn_dir}" >> sub_dir_external.txt 
                        end

                        svn propset svn:externals . -F sub_dir_external.txt

                        if (${status}) then
                            ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}Command failed in `pwd`: svn propset svn:externals . -F sub_dir_external.txt"
                            set error_found = 1
                            break
                        endif 

                        if (! ${error_found}) then
                            # We set the depth in the next svn command simply
                            # because in initial setup we might have done a
                            # shallow checkout. 
                            svn up --set-depth=infinity > /dev/null
                            if (${status}) then
                                ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}Command failed in `pwd`: svn up --set-depth=infinity"
                                set error_found = 1
                            endif
                        endif 

                        if (! ${error_found}) then 
                            set have_viable_fresh_external = 1
                        endif 
                    popd > /dev/null
                endif
            popd > /dev/null
        endif
    endif

    # ${VERBOSE_ECHO} "Variable have_viable_fresh_external is now ${have_viable_fresh_external}"
    
    if (${have_viable_fresh_external}) then
        echo " " 
        echo "${REPO_SYNC_RECURSION_PREFIX}++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
        echo "${REPO_SYNC_RECURSION_PREFIX}Checking local_fresh/src versus ${external_label}_external_fresh/ivi"
        echo " "

        foreach svn_dir (${changed_svn_dirs}) 
            set sub_dir_str = `echo ${svn_dir} | sed 's#//*#_#g'`
            set rdiff_result_file = rdiff_${sub_dir_str}_local_${external_label}_external.res 

            echo "Executing: recursive_diff local_fresh/src/${svn_dir} ${external_label}_external_fresh/ivi/${svn_dir} in `pwd`"
            echo "Result in: ${rdiff_result_file}" 
            recursive_diff local_fresh/src/${svn_dir} ${external_label}_external_fresh/ivi/${svn_dir} >& "${rdiff_result_file}"

            if (! -z "${rdiff_result_file}") then 
                set diff_status_with_external = 1
            else 
                set diff_status_with_external = 0
            endif 

            # echo diff_status_with_external: $diff_status_with_external 

            if (${diff_status_with_external}) then
                ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}Differences found between local_fresh/src/${svn_dir} AND ${external_label}_external_fresh/ivi/${svn_dir}."
                ${P_STDERR} " "
                stdin_to_stderr < ${rdiff_result_file}
                ${P_STDERR} " "
                ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}-----------------------------------------"

                set script_status = 1
            else 
                ${VERBOSE_ECHO} "${REPO_SYNC_RECURSION_PREFIX}No difference found between local_fresh/src/${svn_dir} AND ${external_label}_external_fresh/ivi/${svn_dir}."
            endif 

            ${KJB_MV} "${rdiff_result_file}" "${REPO_SYNC_ARCHIVE_DIR}"
            if (${status}) then
                ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}Command failed in `pwd`"
                ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}${KJB_MV} ${rdiff_result_file} ${REPO_SYNC_ARCHIVE_DIR}"
                # Exiting would be a bit extreme? 
            endif 
        end
    else 
        ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}No viable fresh external to check against."
        set script_status = 1
    endif 

    if (-d "${git_clone_dir}") then 
        echo " "
        echo "${REPO_SYNC_RECURSION_PREFIX}++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
        echo "${REPO_SYNC_RECURSION_PREFIX}Checking local_fresh/src versus ${git_clone_dir}."
        echo " "

        set count = 1
        while (${count} <= ${num_changed_dirs})
            set svn_dir = $changed_svn_dirs[$count]
            set sub_dir_str = `echo ${svn_dir} | sed 's#//*#_#g'`
            set external_dir = $changed_external_dirs[$count]
            @ count += 1

            set rdiff_result_file = rdiff_${sub_dir_str}_local_${external_label}_repo_copy.res 

            echo "Executing: recursive_diff local_fresh/src/${svn_dir} ${git_clone_dir}/${external_dir} in `pwd`"
            echo "Result in: ${rdiff_result_file}" 
            recursive_diff local_fresh/src/${svn_dir} ${git_clone_dir}/${external_dir}  >& "${rdiff_result_file}"

            if (! -z "${rdiff_result_file}") then 
                set diff_status_with_repo_copy = 1
            else 
                set diff_status_with_repo_copy = 0
            endif 

            # echo diff_status_with_repo_copy: $diff_status_with_repo_copy 

            if (${diff_status_with_repo_copy}) then
                ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}Differences found between local_fresh/src/${svn_dir} AND ${git_clone_dir}/${external_dir}."
                ${P_STDERR} " "
                stdin_to_stderr < ${rdiff_result_file}
                ${P_STDERR} " "
                ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}-----------------------------------------"

                set script_status = 1
            else 
                ${VERBOSE_ECHO} "${REPO_SYNC_RECURSION_PREFIX}No difference found between local_fresh/src/${svn_dir} AND ${git_clone_dir}/${external_dir}."
            endif 

            ${KJB_MV} "${rdiff_result_file}" "${REPO_SYNC_ARCHIVE_DIR}"
            if (${status}) then
                ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}Command failed in `pwd`"
                ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}    ${KJB_MV} ${rdiff_result_file} ${REPO_SYNC_ARCHIVE_DIR}"
                # Exiting would be a bit extreme? 
            endif 
        end
   else 
       ${P_STDERR} "${REPO_SYNC_RECURSION_PREFIX}No git copy in ${git_clone_dir} to check against."
       set script_status = 1
   endif 
endif 

cleanup: 

echo "${REPO_SYNC_RECURSION_PREFIX}Script repo_sync_with_external_2 DONE processing ->${direction}<- external entity ${external_label}"
echo "${REPO_SYNC_RECURSION_PREFIX}Exit status is ${script_status}"
echo "${REPO_SYNC_RECURSION_PREFIX}Finish time is `date`"
echo "${REPO_SYNC_RECURSION_PREFIX}CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"
echo " "

exit ${script_status}
