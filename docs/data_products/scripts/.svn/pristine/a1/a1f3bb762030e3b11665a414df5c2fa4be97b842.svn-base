#!/bin/tcsh

# set echo 

@ num_args = ${#argv}

if (${num_args} < 3) then
    ${P_STDERR} "Script repo_sync_create needs a least three parameters."
    ${P_STDERR} "The first argument tells us the protocal (e.g., git)."
    ${P_STDERR} " "
    ${P_STDERR} "The second is a repo path, E.g.," 
    ${P_STDERR} "   https://github.com/ivilab/src"
    ${P_STDERR} "   https://github.com/ml4ai/delphi"
    ${P_STDERR} "If you do a 'svn list [repo_path]', you should see trunk, and branches "
#     ${P_STDERR} "If the location of elements of the svn repo is not the root of"
#     ${P_STDERR} "of the external repository, then we can add path elements as in:"
#     ${P_STDERR} "This location (e.g., 'ivi' needs to exist. "
#     ${P_STDERR} "Alternatively, the paths can be in the map file described next, "
#     ${P_STDERR} "in which case, they will be created."
    ${P_STDERR} " "
    ${P_STDERR} "The third argument is a file that contains mappings between directories"
    ${P_STDERR} "which are pairs of sub-paths. The first is the svn location, and the "
    ${P_STDERR} "second is the external repo location relative to the repo path."
    ${P_STDERR} " "
    ${P_STDERR} "Additional arguments are options, including:"
    ${P_STDERR} "   force  (rename obstructing directories to dated archival names.)"
    ${P_STDERR} "   update (assume obstructing directories are aleady correct.)"
    ${P_STDERR} "   echo   (provide debugging output.)"
    exit 1
endif 

set force =  0
set update = 0

foreach arg (${argv[4-$#]})
    if ("${arg}" == "force") then 
        set force = 1
    else if ("${arg}" == "update") then 
        set update = 1
    else if ("${arg}" == "echo") then 
        set echo
    else 
        ${P_STDERR} "Optional argument ${arg} is invalid."
        exit 1
    endif 
end

set cmd_error = ""
set misc_error = ""

set base_path = "/home/ivilab/repo_sync"
set local_repo_base_path = "/home/svn/external"

set svn_dirs=`cat $3 | grep -v '^ *#' | grep -v '^ $$' | sed 's/  */ /g' | cut -d ' ' -f 1`
set external_dirs=`cat $3 | grep -v '^ *#' | grep -v '^ $$' | sed 's/  */ /g' | cut -d ' ' -f 2`

if ($#svn_dirs != $#external_dirs) then
    ${P_STDERR} "Error parsing $3."
    ${P_STDERR} "Symptom: Unequal numbers of svn_dirs and external_dirs"
    exit 1 
endif 

set num_dirs = $#svn_dirs

# set svn_dirs = "Make include_before include_after lib"

set time_str = `date '+%y-%m-%d-%H-%M'`

# We only support git right now. 
if ("${1}" == 'git') then
    set is_git = 1
else
    ${P_STDERR} "Currently the first argument must be 'git'."
    exit 1
endif 

set external_repo = "$2" 

# We had the idea that changes would be sent to git via an ivilab branch, and
# "git push" would become a pull request. This has yet to be tested, and might
# not even be finished. It might not make sense, as all git pushes can already
# be via pull requests, and only Kobus uses svn. 
#
# This choice needs to be consistent with that in repo_sync_external_dir!
#
set support_change_branches = 0

if (${support_change_branches}) then 
    set ivilab_branch = "ivilab_svn"
    set external_repo_svn = "${external_repo}/branches/${ivilab_branch}"
else 
    set external_repo_svn = "${external_repo}/trunk"
endif 

if (${is_git}) then
#     # Is it always trunk?
#     set has_trunk = `echo ${external_repo_path} | grep -c '/trunk/'`
# 
#     if (${has_trunk}) then
#         set git_repo_ivi_dir = `echo ${external_repo_path} | sed 's#^.*/trunk/\(.*\)$#\1#'`
#         set external_repo = `echo ${external_repo_path} | sed 's#^\(.*\)/trunk/.*$#\1#'`
#     else 
#         set has_trunk = `echo ${external_repo_path} | grep -c '/trunk$'`
# 
#         if (${has_trunk}) then
#             set git_repo_ivi_dir = ""
#             set external_repo = `echo ${external_repo_path} | sed 's#^\(.*\)/trunk#\1#'`
#         endif 
#     endif 
# 
#     if (! ${has_trunk}) then
#         ${P_STDERR} "The external repo path does not contain '/trunk'."
#         ${P_STDERR} "This may be OK, but the script repo_sync_create needs to be extended."
#         exit 1
#     endif 

    # These take the first two sub-dirs after the URL, but we want the last two
    # if we are emulating with files for testing. We probably want to verify
    # that we only have more than two if the URL is a file. 
    #
    # set repo_home =  `echo ${external_repo} | sed 's#^[a-z][a-z]*:///*[^/][^/]*//*\([^/][^/]*\)/.*$#\1#'`
    # set repo_name =  `echo ${external_repo} | sed 's#^[a-z][a-z]*:///*[^/][^/]*//*[^/][^/]*//*\([^/][^/]*\).*$#\1#'`

    set repo_home =  `echo ${external_repo} | sed 's#^[a-z][a-z]*://.*//*\([^/][^/]*\)/[^/][^/]*$#\1#'`
    set repo_name =  `echo ${external_repo} | sed 's#^[a-z][a-z]*://.*//*[^/][^/]*/\([^/][^/]*\)$#\1#'`

    set label =  ${repo_home}_${repo_name}
    set git_shadow_path = "${base_path}/${label}_git"

    ${VERBOSE_ECHO} "Script repo_sync_create is using external_repo: ${external_repo}"
    ${VERBOSE_ECHO} "Script repo_sync_create is using external_repo_svn: ${external_repo_svn}"
    ${VERBOSE_ECHO} "Script repo_sync_create is using repo_home: ${repo_home}"
    ${VERBOSE_ECHO} "Script repo_sync_create is using repo_name: ${repo_name}"
    ${VERBOSE_ECHO} "Script repo_sync_create is using label: ${label}"
    ${VERBOSE_ECHO} "Script repo_sync_create is using git_shadow_path: ${git_shadow_path}"

    if ((! ${update}) && (! ${force}) && (-e "${git_shadow_path}/${repo_name}")) then
        set misc_error = "There may already be a local checkout in ${git_shadow_path}."
        goto script_error_handler
    endif
endif 

${KJB_MKDIR} "${local_repo_base_path}/${repo_home}"
if (${status}) then
    set cmd_error = "${KJB_MKDIR} ${local_repo_base_path}/${repo_home}"
    goto script_error_handler
endif

set local_repo = "${local_repo_base_path}/${repo_home}/${repo_name}"

set external_dir_name = "${label}_external"
set external_dir_path = "${base_path}/${label}_external"

set local_dir_name = "${label}_local" 
set local_dir_path = "${base_path}/${local_dir_name}"

# Check some dirs first. 
if ((! ${force}) && (! ${update})) then
    if (-e "${local_repo}") then
        set misc_error = "There may already be a repository in ${local_repo}."
        goto script_error_handler
    endif
    if (-e "${external_dir_path}") then
        set misc_error = "There may already be an external checkout in ${external_dir_path}."
        goto script_error_handler
    endif
    if (-e "${local_dir_path}") then
        set misc_error = "There may already be a local checkout in ${local_dir_path}."
        goto script_error_handler
    endif
endif 

#####################################################################################

${KJB_TOUCH} /home/svn/src/hooks/SKIP_POST_TO_COMMIT
if (${status}) then
    set cmd_error = "${KJB_TOUCH} /home/svn/src/hooks/SKIP_POST_TO_COMMIT"
    goto script_error_handler
endif

${KJB_TOUCH} /home/svn/src/hooks/SKIP_POST_FROM_COMMIT
if (${status}) then
    set cmd_error = "${KJB_TOUCH} /home/svn/src/hooks/SKIP_POST_FROM_COMMIT"
    goto script_error_handler
endif

#####################################################################################

${VERBOSE_ECHO} "Setting up IVI in external repository to be mirrored in ${git_shadow_path}."

if (${is_git}) then
    ${KJB_MKDIR} "${git_shadow_path}"
    if (${status}) then
        set cmd_error = "${KJB_MKDIR} ${git_shadow_path}"
        goto script_error_handler
    endif
    
    pushd "${git_shadow_path}"
        if ((${force}) && (-e "${repo_name}")) then 
            ${VERBOSE_ECHO} "Moving ${repo_name} out of the way in `pwd`."
            ${KJB_MV} "${repo_name}" "${repo_name}.${time_str}"
            if (${status}) then
                set cmd_error = "${KJB_MV} ${repo_name}.${time_str}"
                goto script_error_handler
            endif
        endif 

        if ((${update}) && (-e "${repo_name}")) then 
            ${VERBOSE_ECHO} "Assuming existing IVI dirs in external repository is OK due to 'update'."
        else 
            set cmd = "git clone ${external_repo} ${repo_name}"
            ${VERBOSE_ECHO} "Executing command in `pwd`"
            ${VERBOSE_ECHO} "    ${cmd}" 
            ${cmd}; if (${status}) goto cmd_error_handler
        endif 

        pushd "${repo_name}" > /dev/null
            # Changes here must be consitent with repo_sync_external_dir!
            if (${support_change_branches}) then 
                # Git does not make it easy to simply create a branch if it does
                # not exist. Here is one hack that does it.
                if (! -e .git/refs/head/${ivilab_branch})) then 
                    set cmd = "git checkout -b ${ivilab_branch}"
                else
                    set cmd = "git checkout"
                endif 
            else 
                set cmd = "git checkout"
            endif 

            ${VERBOSE_ECHO} "Executing command in `pwd`"
            ${VERBOSE_ECHO} "    ${cmd}" 
            ${cmd}; if (${status}) goto cmd_error_handler

#             if ("${git_repo_ivi_dir}" != "") then
#                 if (! -d "${git_repo_ivi_dir}") then
#                     set misc_error = "Script repo_sync_create expected to find ${git_repo_ivi_dir} in ${git_shadow_path}/${repo_name}."
#                     goto script_error_handler
#                 endif
#               
#                 pushd "${git_repo_ivi_dir}" > /dev/null
#             endif 

            cat /dev/null > svn_to_external_map.txt
            if (${status}) then
                set cmd_error = 'cat /dev/null > svn_to_external_map.txt'
                goto script_error_handler
            endif

            set count = 1
            while (${count} <= ${num_dirs})
                echo "$svn_dirs[$count] $external_dirs[$count]" >> svn_to_external_map.txt 
                @ count += 1
            end

            set commit_needed = 0

            foreach dir (${external_dirs}) 
                if (-e "${dir}") then
                    if (${force}) then
                        ${VERBOSE_ECHO} "Moving ${dir} out of the way in `pwd`."
                        ${VERBOSE_ECHO} "Executing git mv ${dir} ${dir}.${time_str}"
                        git mv "${dir}" "${dir}.${time_str}"
                        if (${status}) then
                            set cmd_error = "git mv ${dir} ${dir}.${time_str}"
                            goto script_error_handler
                        endif
                    else if (${update}) then
                        ${VERBOSE_ECHO} "Assuming existing ${dir} in `pwd` is OK due to 'update'."
                    else 
                        set misc_error = "${dir} already exists in `pwd`, but repo_sync_create needs it clean." 
                        goto script_error_handler
                    endif 
                endif 

                if (! -e "${dir}") then
                    ${KJB_MKDIR} ${dir}
                    if (${status}) then
                        set cmd_error = "${KJB_MKDIR} ${dir}"
                        goto script_error_handler
                    endif

                    git add "${dir}"
                    if (${status}) then
                        set cmd_error = "git add ${dir}"
                        goto script_error_handler
                    endif

                    set commit_needed = 1
                endif 

                if (! -e "${dir}/.gitkeep") then 
                    ${KJB_TOUCH} ${dir}/.gitkeep
                    if (${status}) then
                        set cmd_error = "${KJB_TOUCH} ${dir}/.gitkeep"
                        goto script_error_handler
                    endif

                    ${VERBOSE_ECHO} "Executing git add ${dir}/.gitkeep"
                    git add ${dir}/.gitkeep
                    if (${status}) then
                        set cmd_error = "git add ${dir}/.gitkeep"
                        goto script_error_handler
                    endif

                    set commit_needed = 1
                endif
            end 

            if (${commit_needed}) then
                ${VERBOSE_ECHO} "Executing git commit -a -m 'Initial construction of IVI dirs'"
                git commit -a -m 'Initial construction of IVI dirs'
                if (${status}) then
                    set cmd_error = "git commit -a -m 'Initial construction of IVI dirs'"
                    goto script_error_handler
                endif

                if (${support_change_branches}) then 
                    set cmd = "git push --set-upstream origin ${ivilab_branch}"
                else 
                    set cmd = "git push"
                endif 

                ${VERBOSE_ECHO} "Executing command in `pwd`"
                ${VERBOSE_ECHO} "    ${cmd}" 
                ${cmd}; if (${status}) goto cmd_error_handler
            endif

#             if ("${git_repo_ivi_dir}" != "") then
#                 popd > /dev/null
#             endif 
        popd > /dev/null
    popd > /dev/null
endif 

#####################################################################################

${VERBOSE_ECHO} "Setting up local repository ${local_repo} to house SVN externals."

if ((-e "${local_repo}") && (${update})) then
    ${VERBOSE_ECHO} "Assuming existing local repo in ${local_repo} is OK due to 'update'."
else 
    if (-e "${local_repo}") then
        # If this is true, then force must be true. 
        if (! ${force}) then
            set misc_error = "CANT HAPPEN: ${local_repo} exists but force is false."
            gote script_error_handler
        endif

        ${KJB_MV} "${local_repo}"  "${local_repo}.${time_str}"
        if (${status}) then
            set cmd_error = "${KJB_MV} ${local_repo} ${local_repo}.${time_str}"
            goto script_error_handler
        endif
    endif 

    svnadmin create ${local_repo}
    if (${status}) then
        set cmd_error = "svnadmin create ${local_repo}"
        goto script_error_handler
    endif

#     foreach dir (${svn_dirs}) 
#         svn mkdir -m 'Initial IVI directory creation' file://${local_repo}/${dir}
#      
#         if (${status}) then
#             set cmd_error = "svn mkdir -m 'Initial IVI directory creation' file://${local_repo}/${dir}"
#             goto script_error_handler
#         endif
#     end 
endif 

#####################################################################################

${VERBOSE_ECHO} "Setting up SVN externals in ${external_dir_path}."

if ((-e "${external_dir_path}") && (${update})) then
    ${VERBOSE_ECHO} "Assuming existing external directory in ${external_dir_path} is OK due to 'update'."
else 
    if (-e "${external_dir_path}") then
        if (! ${force} ) then
            set misc_error = "CANT HAPPEN: ${external_dir_path} exists but force is not true."
            gote script_error_handler
        endif

        ${KJB_MV} "${external_dir_path}" "${external_dir_path}.${time_str}"
        if (${status}) then
            set cmd_error = "${KJB_MV} ${external_dir_path} ${external_dir_path}.${time_str}"
            goto script_error_handler
        endif
    endif 

    ${KJB_MKDIR} "${external_dir_path}"
    if (${status}) then
        set cmd_error = "${KJB_MKDIR} ${external_dir_path}"
        goto script_error_handler
    endif

    svn co file://${local_repo} "${external_dir_path}/ivi" 
    if (${status}) then
        set cmd_error = "svn co file://${local_repo} ${external_dir_path}/ivi"
        goto script_error_handler
    endif
endif 

pushd "${external_dir_path}/ivi" > /dev/null
    if (-e externals.txt) then
        if ( ! ${update} ) then
            set misc_error = "`pwd`/externals.txt exists, but update flag is false."
            got script_error_handler
        endif 

        svn info externals.txt >& /dev/null

        if (${status}) then
            set misc_error = '`pwd`/externals.txt exists, but it is not under svn control.'
            goto script_error_handler
        endif

        set externals_is_in_svn = 1
    else 
        set externals_is_in_svn = 0
    endif 

    cat /dev/null > externals.txt
    if (${status}) then
        set cmd_error = 'cat /dev/null > externals.txt'
        goto script_error_handler
    endif

    if (! ${externals_is_in_svn}) then
        svn add externals.txt
        if (${status}) then
            set cmd_error = "svn add externals.txt"
            goto script_error_handler
        endif
    endif 

    set count = 1
    while (${count} <= ${num_dirs})
        echo "$svn_dirs[$count] ${external_repo_svn}/$external_dirs[$count]" >> externals.txt 
        @ count += 1
    end

    svn commit -m 'Commit by script repo_sync_create.'
    if (${status}) then
        set cmd_error = "svn commit -m 'Commit by script repo_sync_create.'"
        goto script_error_handler
    endif

    svn propset svn:externals . -F externals.txt 
    if (${status}) then
        set cmd_error = "svn propset svn:externals . -F externals.txt"
        goto script_error_handler
    endif

    # We set the depth in the next svn command simply because in testing or
    # initial setup we might have done a shallow checkout. 
    svn up --set-depth=infinity
    if (${status}) then
        set cmd_error = "svn up --set-depth=infinity"
        goto script_error_handler
    endif
popd > /dev/null

#####################################################################################

${VERBOSE_ECHO} "Setting up local checkout in ${local_dir_path} for tracking SVN changes."

if ((-e "${local_dir_path}") && (${update})) then
    ${VERBOSE_ECHO} "Assuming local checkout in ${local_dir_path} is OK due to 'update'."
else 
    if (-e "${local_dir_path}") then
        if (! ${force} ) then
            set misc_error = "CANT HAPPEN: ${local_dir_path} exists but force is false."
            gote script_error_handler
        endif

        ${KJB_MV} "${local_dir_path}" "${local_dir_path}.${time_str}"
        if (${status}) then
            set cmd_error = "${KJB_MV} ${local_dir_path} ${local_dir_path}.${time_str}"
            goto script_error_handler
        endif
    endif 

    ${KJB_MKDIR} "${local_dir_path}/src"
    if (${status}) then
        set cmd_error = "${KJB_MKDIR} ${local_dir_path}/src"
        goto script_error_handler
    endif
endif 

pushd "${local_dir_path}/src" > /dev/null
    foreach dir (${svn_dirs}) 
        if ((-e ${dir}) && (! ${update})) then
            # If this is true, force must be true.
            if (! ${force} ) then
                set misc_error = "${dir} exists but both force and update are false."
                gote script_error_handler
            endif

            ${VERBOSE_ECHO} "Moving ${dir} out of the way in `pwd`."
            ${KJB_MV} "${dir}" "${dir}.${time_str}"
            if (${status}) then
                set cmd_error = "${KJB_MV} ${dir} ${dir}.${time_str}"
                got script_error_handler
            endif
        endif 

        if (${update}) then
            set depth = ""
        else 
            set depth = "--depth=empty"
        endif 

        set cmd = "svn co ${depth} file:///home/svn/src/${dir}/trunk ${dir}"
        ${VERBOSE_ECHO} "Executing command in `pwd`"
        ${VERBOSE_ECHO} "    ${cmd}" 
        ${cmd}; if (${status}) goto cmd_error_handler

        svn up ${dir}/.gitkeep
        if (${status}) then
            set cmd_error = "svn up ${dir}/.gitkeep"
            goto script_error_handler
        endif

        # The above won't catch some errors.
        if (! -e "${dir}/.gitkeep") then
           set misc_error = "${dir}/.gitkeep does not exist after checkout, probably because it is not in the master repository."
           got script_error_handler
        endif 
    end 
popd > /dev/null

#####################################################################################

${VERBOSE_ECHO} "Setting up local staging directory for ensuring all directories have .gikeep in them."

# There are no issues with doing this multiple times, so we do not consult
# 'force' or 'update'.

pushd "${base_path}" > /dev/null
    ${KJB_MKDIR} "local_staging/src"
    if (${status}) then
        set cmd_error = "${KJB_MKDIR} local_staging"
        goto script_error_handler
    endif

    pushd "local_staging/src" > /dev/null
        foreach dir (${svn_dirs}) 
            if (-e "${dir}") then 
                # We set the depth in the next svn command simply because in
                # testing or initial setup we might have done a shallow
                # checkout. 
                svn up --set-depth=infinity "${dir}"
                if (${status}) then
                    set cmd_error = "svn up --set-depth=infinity ${dir}"
                    goto script_error_handler
                endif
            else 
                svn co "file:///home/svn/src/${dir}/trunk" "${dir}"
                if (${status}) then
                    set cmd_error = "svn co file:///home/svn/src/${dir}/trunk ${dir}"
                    goto script_error_handler
                endif
            endif
        end 
    popd > /dev/null
popd > /dev/null

#####################################################################################

cd /home/ivilab/repo_sync 

setenv REPO_SYNC_INITIAL

${KJB_RM} /home/svn/src/hooks/SKIP_POST_TO_COMMIT
if (${status}) then
    set cmd_error = "${KJB_RM} /home/svn/src/hooks/SKIP_POST_TO_COMMIT"
    goto script_error_handler
endif

setenv REPO_SYNC_RECURSION_PREFIX ""
repo_sync_with_external "to" "${label}"
if (${status}) then
    set cmd_error = "repo_sync_with_external to ${label}"
    goto script_error_handler
endif

${KJB_RM} /home/svn/src/hooks/SKIP_POST_FROM_COMMIT
if (${status}) then
    set cmd_error = "${KJB_RM} /home/svn/src/hooks/SKIP_POST_FROM_COMMIT"
    goto script_error_handler
endif

#####################################################################################

echo "Script repo_sync_create finished successfully."
exit 0 

#####################################################################################

# Bad things happend. 

# If we put the command to be executed into the variable cmd, and the command
# failed, we should get send here. 

cmd_error_handler: 
set cmd_error="${cmd}" 

# Otherwise we get sent here. 

script_error_handler: 

if ("${cmd_error}" != "") then
    ${P_STDERR} "Command failed in script repo_sync_create in `pwd`: "
    ${P_STDERR} "${cmd_error}"
    exit 1
else if ("${misc_error}" != "") then
    ${P_STDERR} "Error in script repo_sync_create in `pwd`: "
    ${P_STDERR} "${misc_error}"
    exit 1
else 
    ${P_STDERR} "Unknown error in script repo_sync_create in `pwd`: "
    ${P_STDERR} "Likely an error reporting issue, as this should not happen."
    exit 1
endif 



