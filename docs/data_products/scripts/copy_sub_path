#!/bin/csh -f 

##############################################################################
#
# Identification:
#     A script to copy a sub-path to a directory
#
# Description:
#     This script copies a sub-path to a directory, creating the directory
#     structure as needed. For example 
# |        copy_sub_path SOURCE_DIR a/b/c TARGET_DIR
# |   where a/b/c is a file or link does 
# |        mkdir -p TARGET_DIR/a/b/
# |        cp -d SOURCE_DIR/a/b/c TARGET_DIR/a/b/    (linux)
# |        cp -R SOURCE_DIR/a/b/c TARGET_DIR/a/b/    (mac)
# |   and where a/b/c is a directory does
# |        mkdir -p TARGET_DIR/a/b/
#
#     The first argument to copy_sub_path must be a directory, the second one
#     must be an existing sub-path in the first argument. If there is a third
#     argument, it must be a directory. If the third argument is omitted, then
#     we use './'. 
#
#     I created this script in support of repository synching, as the different
#     behaviour above in the case of files or directories makes using basic 'cp'
#     tricky. It may have other uses, as the usual semantics for copy differ
#     between files and directories in that you typically have to choose between
#     skipping directories and recursing into them. 
#
#     This behaviour might exist in the core utilities, but I am not aware of
#     it. I have written this script as to not rely on something esoteric.  The
#     program "rsync" can be made to do similar things, but its default is to
#     copy everything, whereas here we create the needed directory, but only
#     copy the leaf. For the example above, using rsync would require an
#     "include" of "c" and exclude of "*", which is getting a bit awkward, and
#     perhaps non-robust if "c" exists at multiple levels.
#
#     If the environment variable COPY_ONLY_IF_DIFFERENT is set, then the script
#     only copies a file if it would lead to a change. This is not particularly
#     efficient, but some applications (see repo_sync) need it.
#     COPY_ONLY_IF_DIFFERENT has no effect if the argument is a directory.
#     Currently we check with diff. We could use rsync with '--size-only', but
#     '--size-only' is risky with code. We could use recursive_diff to do
#     directories, but we do not need that for anything yet. 
#
# Author:
#     Kobus Barnard 
#
##############################################################################

# set echo 

@ num_args = ${#argv}

if ((${num_args} < 2) || (${num_args} > 3) ) then
    ${P_STDERR} "Script copy_sub_path needs either 2 or 3 parameters."
    exit 1
endif 

set source_base_path = "$1"
set source_sub_path = "$2"

if (! -d "${source_base_path}") then
    ${P_STDERR} "First argument to script copy_sub_path must be a directory."
    ${P_STDERR} "Specifically, ${source_base_path} was not found in `pwd`."
    exit 1
endif 

if ((! -e "${source_base_path}/${source_sub_path}") && (! -l "${source_base_path}/${source_sub_path}")) then
    ${P_STDERR} "Second argument to script copy_sub_path must exist or be a link."
    ${P_STDERR} "Specifically, ${source_sub_path} was not found in ${source_base_path}."
    exit 1
endif 

if ("${num_args}" == 2) then
    set target_base_path = "./" 
else 
    set target_base_path = "$3" 

    if (! -d "${target_base_path}") then
        ${P_STDERR} "Third argument to script copy_sub_path must be an existing directory."
        exit 1
    endif 
endif 
    
set source_path = "${source_base_path}/${source_sub_path}"

# Treat a link like a file, regardless if it points to a directory. 
if ((-d "${source_path}") && (! -l "${source_path}")) then
    set source_dir = "${source_sub_path}"
    set source_file = ""
else if (`echo ${source_sub_path} | grep -c '/'`) then
    set source_dir = `echo ${source_sub_path} | sed 's#\(.*\)/.*#\1#'`
    set source_file = `echo ${source_sub_path} | sed 's#\(.*\)/##'`
else 
    set source_dir = ""
    set source_file = "${source_path}"
endif 

# echo source_dir: $source_dir
# echo source_file: $source_file

set target_dir = "${target_base_path}"
# echo target_dir: $target_dir

if ("${source_dir}" != "") then
     set target_dir = "${target_dir}/${source_dir}" 
endif 

# echo ${KJB_MKDIR} "${target_dir}"
${KJB_MKDIR} "${target_dir}"

# We do not do this by default because checking for differences is more
# expensive than simply copying. 
if ($?COPY_ONLY_IF_DIFFERENT) then 
    if (-f "${source_path}") then 

        if ("${source_file}" == "") then
            echo "Cant happen bug in copy_sub_path."
            echo "The source path is a file, but the parsed source file name is null."
            exit 1
        endif 

        if (-e  "${target_dir}/${source_file}") then
            diff "${source_path}" "${target_dir}/${source_file}" >& /dev/null
            if (! ${status}) then
                if ($?KJB_VERBOSE) then
                    echo "Script copy_sub_path is not copying of ${source_path} to ${target_dir}/${source_file}"
                    echo "    because they are identical and COPY_ONLY_IF_DIFFERENT is set."
                endif 

                exit 
            endif
        endif
    endif
endif

if ("${source_file}" != "") then
    if ($?KJB_VERBOSE) then
        echo "Script copy_sub_path is executing ${KJB_CP} ${source_path} ${target_dir}"
    endif 
    ${KJB_CP} "${source_path}" "${target_dir}"
    if ${status} exit 1
endif 



