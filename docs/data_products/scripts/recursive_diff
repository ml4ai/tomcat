#!/bin/tcsh -f

#
# Script recursive_diff --- usually invoked via aliasias such as rdiff. 
#
# Recursive_diff is much like "diff -r" but with a bit more control. For example
# we do not follow links, which is not neccearily an option available from
# "diff". Instead we report differences in link structure. This script walks
# through the set of files in both directories, one by one, and calls a helper
# script to analyze them. Thus it is potentially quite slow.
#
# We report whether files that are in both directory trees are different.
# Differences are not printed, as we prefer xdiff for actually looking at the
# differences (see the analogous script xrecursive_diff). Missing files are only
# mentioned if KJB_RDIFF_VERBOSE is set to 1 or more.  Files processed are
# echoed if KJB_RDIFF_VERBOSE is set to 2 or more. 
#

# set echo 

# Default failure in case of interupts. 
set exit_value = 1

onintr cleanup
set noglob

set num_args = $#argv

if (${num_args} < 2) then
    echo "Script recursive_diff needs at least two arguments."
    exit 1
endif 

if ($3 == "") then
    set parm = *
else 
    set parm = $3
endif 

if (${num_args} > 3) then
    set extra = "${argv[4-$#]}"
else 
    set extra = ""
endif 

unset noglob

set dir_1 = `echo $1 | sed "s#//*#/#g" | sed 's#/$##'`
set dir_2 = `echo $2 | sed "s#//*#/#g" | sed 's#/$##'`
set dir_1_slash = ${dir_1}/
set dir_2_slash = ${dir_2}/

# echo dir_1_slash: $dir_1_slash
# echo dir_2_slash: $dir_2_slash

set noglob

# echo find $dir_1 -mindepth 1 -name $parm
# find $dir_1 -mindepth 1 -name $parm 
# echo 

# echo find $dir_1 -mindepth 1 -name $parm BAR sed "s#$dir_1_slash##"
# find $dir_1 -mindepth 1 -name $parm | sed "s#$dir_1_slash##" 
# echo 

find $dir_1 -mindepth 1 -name $parm | sed "s#$dir_1_slash##" | sed '/^ *$/d' > .rdiff.1.$$
find $dir_2 -mindepth 1 -name $parm | sed "s#$dir_2_slash##" | sed '/^ *$/d' > .rdiff.2.$$

# cat .rdiff.1.$$

# The -u flag removes duplicates, so the result of the sort is a superset of the
# files in the two places, with only one mention of each file. 
#
sort -u .rdiff.1.$$ .rdiff.2.$$ | recursive_diff_helper ${dir_1_slash} ${dir_2_slash} ${extra} |& tee .rdiff.result.$$

grep -v 'RDIFF_VERBOSE' < .rdiff.result.$$ > .rdiff.diffs.$$

if (! -s .rdiff.diffs.$$) then
    set exit_value = 0
endif 

cleanup:

unset noglob

/bin/rm .rdiff.* 

exit ${exit_value} 


