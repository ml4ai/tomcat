#!/bin/bash

set -u

source configuration_helpers

# We have to specify the full path of the python interpreter in the clients,
# otherwise it will get the usr/bin option that does not contain all the
# modules we need.
# The validation script has some string manipulation functionalities that are only present from Python3.9 and beyond.
PYTHON="/usr/local/bin/python3.9"

if [[ -z ${1+x} ]]; then
  # In case the script is executed standalone.
  text="${RED}Please provide an experiment directory as the first argument of "
  text+="the call to this script.${NC}"
  echo -e "$text"
  exit 1
fi
EXPERIMENT_DIR=$1

if [[ -z ${2+x} ]]; then
  PADDING=""
else
  PADDING=$2
fi

__validate_for_client() {
  local client_name=$1
  local participant_id=$2
  local padding=$3

  if [[ $ALL -ne 1 ]]; then
    yes_no_question "${padding}Do you validate baseline tasks on ${EMPH}$client_name${NC}?"
    ans=$?
    padding="$padding "
  fi
  if [[ $ALL -eq 1 ]] || [[ $ans -eq 0 ]]; then
    local data_dir="$EXPERIMENT_DIR/baseline_tasks"
    mkdir -p "$data_dir" >/dev/null

    local command="cd $HOME/$SYSTEMS_DIR/tomcat/human_experiments/lab_software/tomcat-baseline-tasks; "
    command+="$PYTHON run_baseline_tasks_data_validation.py --p $data_dir --s $participant_id"
    pushd "$HOME/$SYSTEMS_DIR/tomcat/human_experiments/lab_software/tomcat-baseline-tasks" > /dev/null
      # We pipe with sed to add the padding to the output
      $PYTHON run_baseline_tasks_data_validation.py --p "$data_dir" --s "$participant_id" | sed "s/^/${padding} /"
    popd >/dev/null
  fi
}

__validate() {
  local padding=$1

  source collect_participant_ids "${padding} "

  __validate_from_client "lion" "$LION_PARTICIPANT_ID" "$padding"
  __validate_from_client "tiger" "$TIGER_PARTICIPANT_ID" "$padding"
  __validate_from_client "leopard" "$LEOPARD_PARTICIPANT_ID" "$padding"
}

__validate "$PADDING"
