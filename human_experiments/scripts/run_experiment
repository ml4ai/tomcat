#!/bin/bash

# This is the uber script that drives a full experiment. Each step of the experimental design is included in form of
# questions, such that no CS experience should be necessary to execute all the steps required.
# If anything goes wrong during the experiment, the experimenter can abort the process, fix the issue and later
# start over by jumping to a specific step in the experiment.

set -u

CONFIG_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../config/uber_script" >/dev/null 2>&1 && pwd)"
SCRIPTS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
export SCRIPTS_DIR

# Load global variables for the experiment
source "$CONFIG_DIR/config"

# Get the link to the final survey from the internal resources
if [ -f "$FINAL_SURVEY_LINK_PATH" ]; then
  # shellcheck disable=SC1090
  source "$FINAL_SURVEY_LINK_PATH"
fi

# Export variables in the config file that can be used by sub-processes.
export SYSTEMS_DIR
export EXPERIMENT_USER
export CLIENT_MAP_URL
export FINAL_SURVEY_URL

pushd "$SCRIPTS_DIR" >/dev/null || exit 1

source configuration_helpers

__help() {
  # Display Help
  echo
  echo "This the Uber Script to run a complete experiment in the lab."
  echo
  echo "The steps are described below. The first step is always executed to "
  echo "guarantee that data is saved to the correct directory. You can jump "
  echo "to a specific step by setting the variable GOTO to the desired step "
  echo "before calling the script (e.g. GOTO=5 ./run_experiment)"
  echo
  echo "[1]:  Set the experiment time"
  echo -e "${BLACK}${ON_YELLOW}Block 1                                  ${NC}"
  echo "[2]:  Check the NFS status"
  echo "[3]:  Report time difference between TOM and CAT"
  echo "[4]:  Start the Testbed"
  echo "[5]:  Start Minecraft"
  echo "[6]:  Open the Client Map"
  echo "[7]:  Open the Eye-tracker program"
  echo "[8]:  Open the Instructive Video"
  echo "[9]:  Start the Lab Recorder"
  echo "[10]: Start recording from the Eye-tracker"
  echo "[11]: Start Face and Screen recordings"
  echo " [11.1]: Face"
  echo " [11.2]: Screen"
  echo "[12]: Start the Baseline Tasks"
  echo "[13]: End Block 1"
  echo " [13.1]: Stop Face recordings"
  echo " [13.2]: Stop Screen recordings"
  echo " [13.3]: Stop Eye-tracker recordings"
  echo " [13.4]: Stop LabRecorder"
  echo -e "${BLACK}${ON_YELLOW}Block 2                                  ${NC}"
  echo "[14]: Start the Lab Recorder"
  echo "[15]: Start Minecraft Watcher"
  echo " [15.1]: Start Data Watcher"
  echo " [15.2]: Start Trial ID Watcher"
  echo "[16]: Start the Audio, Face and Screen recordings"
  echo " [16.1]: Audio"
  echo " [16.2]: Face"
  echo " [16.3]: Screen"
  echo "[17]: Start Eye-tracker recordings"
  echo "[18]: Stop Eye-tracker recordings"
  echo "[19]: Open the Final Survey"
  echo "[20]: Stop Audio, Face and Screen recordings"
  echo "[21]: Stop the Lab Recorder"
  echo "[22]: Exports Minecraft data"
  echo "[23]: Extracts Testbed Logs"
  echo "[24]: End the experiment (close remaining applications)"
  echo
  echo "Syntax: run_experiment [-h|a]"
  echo "options:"
  echo "h     Print this Help."
  echo "a     Starts the components in all of the client machines without "
  echo "d     Dry-run mode. The data is saved under the dry-run directory structure."
  echo "t     Test mode. The data is saved under the development directory structure. It has precedence over the -d option."
  echo "      asking the experimenter to confirm."
  echo
}

ALL=0
DRY_RUN=0
TEST=0
while getopts ":hadt" option; do
  case $option in
  h) # display Help
    __help
    exit
    ;;
  a) # skip client confirmation
    ALL=1
    ;;
  d) # dry-run mode
    DRY_RUN=1
    ;;
  t) # test mode
    TEST=1
    ;;
  \?) # Invalid option
    echo -e "${RED}Error: Invalid option"
    exit
    ;;
  esac
done
export ALL
export TEST
export DRY_RUN

# Check if the script is running in a tmux session. If that is the case, enable the child scripts to tail log files
# in different windows of the current tmux session.
if [ "$TERM" = "screen" ] && [ -n "$TMUX" ]; then
  TMUX_ON=1
else
  TMUX_ON=0
fi
export TMUX_ON

## Open extra panes or terminal to display the monitor program and announcements menu.
#monitor_command="source $HOME/$SYSTEMS_DIR/tomcat/human_experiments/lab_software/monitor_programs/monitor"
#announcements_command="source $HOME/$SYSTEMS_DIR/tomcat/human_experiments/lab_software/say_announcements/say_announcement_menu"
#if [[ $TMUX_ON -eq 1 ]]; then
## Split the screen in three panels. The uber script will be on the left, the monitor in the upper
#  # right and the announcements in the bottom right
#  tmux split-window -h "$monitor_command"
#  tmux split-window -v "$announcements_command"
#
#  # Move back to the main pane
#  tmux select-pane -t 0
#else
#  # Open two extra terminals with the announcement menu and monitor programs
#  gnome-terminal -- bash -c "$monitor_command"
#  gnome-terminal -- bash -c "$announcements_command"
#fi

if [[ $TEST -eq 1 ]]; then
  DATA_ROOT_DIR="$DATA_DIR_TEST"
  DRY_RUN=0
elif [[ $DRY_RUN -eq 1 ]]; then
  DATA_ROOT_DIR="$DATA_DIR_DRY_RUN"
else
  DATA_ROOT_DIR="$DATA_DIR_GROUP"
fi
export DATA_ROOT_DIR

# The step to jump to after the first step. If not provided, it starts from the next step after the first one.
if [[ -z ${GOTO+x} ]]; then
  GOTO=2
fi

source check_disk_space "$DATA_DIR"
source check_connections
source check_data_root_directory

echo -n -e "[1] Enter the experiment ${EMPH}time${NC} (e.g. 09): "
read -r experiment_time
experiment_id=$(date +%Y_%m_%d_"$experiment_time")

export EXPERIMENT_DIR="$DATA_ROOT_DIR/exp_$experiment_id"

source create_data_directory_structure " "

# Lock the experiment folder while the experiment is going on.
# Exp_* dirs with this file will be ignored by data pulling scripts,
# unless the file is too old and/or the script process no longer exists.
echo $$ >"$EXPERIMENT_DIR/run_experiment.lock"

export EXPERIMENT_BLOCK=1

echo ""
echo -e "${BLACK}${ON_YELLOW}Block 1                                    ${NC}"

if [[ $GOTO -le 2 ]]; then
  echo " "

  if yes_no_question "[2] Do you want to check ${EMPH}NFS${NC} status?"; then
    source check_nfs "  "
  fi
fi

if [[ $GOTO -le 3 ]]; then
  echo " "
  if yes_no_question "[3] Do you want to check ${EMPH}Time Difference between ToM and CAT${NC}?"; then
    source report_time_difference
  fi
fi

if [[ $GOTO -le 4 ]]; then
  echo " "
  if yes_no_question "[4] Do you want to start the ${EMPH}Testbed${NC}?"; then
    source start_testbed " "
  fi
fi

if [[ $GOTO -le 5 ]]; then
  echo " "
  if yes_no_question "[5] Do you want to start ${EMPH}Minecraft${NC}?"; then
    source start_minecraft " "
  fi
fi

if [[ $GOTO -le 6 ]]; then
  echo " "
  if yes_no_question "[6] Do you want to open the ${EMPH}Client Map${NC}?"; then
    source open_client_map " "
  fi
fi

if [[ $GOTO -le 7 ]]; then
  echo " "
  if yes_no_question "[7] Do you want to open the ${EMPH}Eye-tracker${NC} program?"; then
    source pupil_recording "open" " "
  fi
fi

if [[ $GOTO -le 8 ]]; then
  echo " "
  if yes_no_question "[8] Do you want to play the ${EMPH}Instructive Video${NC}?"; then
    source play_instructive_video " "
  fi
fi

echo ""
echo -e "${BLACK}${ON_CYAN}Wait for Okay from the Social Science team.${NC}"

if [[ $GOTO -le 9 ]]; then
  echo " "
  if yes_no_question "[9] Do you want to start ${EMPH}Lab Recorder${NC}?"; then
    source start_lab_recorder " "
  fi
fi

echo ""
echo -e "${BLACK}${ON_CYAN}Make sure to press the OK button on Lab Recorder to record anyway before proceeding.${NC}"

if [[ $GOTO -le 10 ]]; then
  echo " "
  if yes_no_question "[10] Do you want to start recording from the ${EMPH}Eye-tracker${NC} program?"; then
    source pupil_recording "start" " "
  fi
fi

if [[ $GOTO -le 11 ]]; then
  echo " "
  if yes_no_question "[11] Do you want to start ${EMPH}Face and Screen${NC} recordings?"; then
    source image_monitoring "start" "  "
    if yes_no_question " [11.1] Do you want to start ${EMPH}Face${NC} recordings?"; then
      source video_recording "webcam" "start" "  "
    fi
    if yes_no_question " [11.2] Do you want to start ${EMPH}Screen${NC} recordings?"; then
      source video_recording "screen" "start" "  "
    fi
  fi
fi

if [[ $GOTO -le 12 ]]; then
  echo " "
  if yes_no_question "[12] Do you want to start the ${EMPH}Baseline Tasks${NC}?"; then
    source start_baseline_tasks " "
  fi
fi

if [[ $GOTO -le 13 ]]; then
  echo " "
  if yes_no_question "[13] Do you want to finish ${EMPH}Block 1${NC}?"; then
    if yes_no_question " [13.1] Do you want to stop ${EMPH}Face${NC} recordings?"; then
      source video_recording "webcam" "stop" " "
    fi
    if yes_no_question " [13.2] Do you want to stop ${EMPH}Screen${NC} recordings?"; then
      source video_recording "screen" "stop" "  "
    fi
    source image_monitoring "stop" "  "
    if yes_no_question " [13.3] Do you want to stop recording from the ${EMPH}Eye-tracker${NC} program?"; then
      source pupil_recording "stop" "  "
    fi
    if yes_no_question " [13.4] Do you want to stop ${EMPH}LabRecorder${NC} and kill its instances on CAT?"; then
      source stop_lab_recorder
    fi
  fi
fi

# Here we start the second block of the experiment session
export EXPERIMENT_BLOCK=2

echo ""
echo -e "${BLACK}${ON_YELLOW}Block 2                                    ${NC}"

if [[ $GOTO -le 14 ]]; then
  echo " "
  if yes_no_question "[14] Do you want to start ${EMPH}Lab Recorder${NC}?"; then
    source start_lab_recorder " "
  fi
fi

echo ""
echo -e "${BLACK}${ON_CYAN}Make sure to press the OK button on Lab Recorder to record anyway before proceeding.${NC}"

if [[ $GOTO -le 15 ]]; then
  echo " "
  if yes_no_question "[15] Do you want to start the ${EMPH}Minecraft Watcher${NC}?"; then
    echo -e "${YELLOW} Watchers will be closed if the Uber Script is interrupted. Make sure to start them again if needed.${NC}"
    if yes_no_question " [15.1] Do you want to start the ${EMPH}Data Watcher${NC}?"; then
      source minecraft_data_watcher "start" "  "
    fi
    if yes_no_question " [15.2] Do you want to start the ${EMPH}Trial ID Watcher${NC}?"; then
      source minecraft_trial_watcher "start" "  "
    fi
  fi
fi

if [[ $GOTO -le 16 ]]; then
  echo " "
  if yes_no_question "[16] Do you want to start ${EMPH}Audio, Face and Screen${NC} recordings?"; then
    source image_monitoring "start" "  "
    if yes_no_question " [16.1] Do you want to start ${EMPH}Audio${NC} recordings?"; then
      source audio_recording "start" "  "
    fi
    if yes_no_question " [16.2] Do you want to start ${EMPH}Face${NC} recordings?"; then
      source video_recording "webcam" "start" "  "
    fi
    if yes_no_question " [16.3] Do you want to start ${EMPH}Screen${NC} recordings?"; then
      source video_recording "screen" "start" "  "
    fi
  fi
fi

if [[ $GOTO -le 17 ]]; then
  echo " "
  if yes_no_question "[17] Do you want to start recording from the ${EMPH}Eye-tracker${NC} program?"; then
    source pupil_recording "start" " "
  fi
fi

echo ""
echo -e "${BLACK}${ON_CYAN}Wait for the end of the Minecraft missions.${NC}"

if [[ $GOTO -le 18 ]]; then
  echo " "
  if yes_no_question "[18] Do you want to stop recording and close the ${EMPH}Eye-tracker${NC} program?"; then
    source pupil_recording "stop" " "
    source pupil_recording "close" " "
  fi
fi

if [[ $GOTO -le 19 ]]; then
  echo " "
  if yes_no_question "[19] Do you want to open the ${EMPH}Final Survey${NC}?"; then
    source open_final_survey " "
  fi
fi

if [[ $GOTO -le 20 ]]; then
  echo " "
  if yes_no_question "[20] Do you want to stop ${EMPH}Audio, Face and Screen${NC} recordings?"; then
    if yes_no_question " [20.1] Do you want to stop ${EMPH}Audio${NC} recordings?"; then
      source audio_recording "stop" "  "
    fi
    if yes_no_question " [20.2] Do you want to stop ${EMPH}Face${NC} recordings?"; then
      source video_recording "webcam" "stop" "  "
    fi
    if yes_no_question " [20.3] Do you want to stop ${EMPH}Screen${NC} recordings?"; then
      source video_recording "screen" "stop" "  "
    fi
    source image_monitoring "stop" "  "
  fi
fi

if [[ $GOTO -le 21 ]]; then
  echo " "
  if yes_no_question "[21] Do you want to stop ${EMPH}LabRecorder${NC} and kill its instances on CAT?"; then
    source stop_lab_recorder
  fi
fi

if [[ $GOTO -le 22 ]]; then
  echo " "
  if yes_no_question "[22] Do you want to export ${EMPH}Minecraft data${NC} for all trials in the experiment?"; then
    source export_minecraft_data " "
  fi
fi

if [[ $GOTO -le 23 ]]; then
  echo " "
  if yes_no_question "[23] Do you want to extract ${EMPH}Testbed logs${NC}?"; then
    source extract_testbed_logs " "
  fi
fi

echo ""
echo -e "${BLACK}${ON_CYAN}Wait for the participants to fill up the surveys.${NC}"

if [[ $GOTO -le 24 ]]; then
  echo " "
  text="[24] Type [${EMPH}quit${NC}] to end the experiment and close remaining applications and processes: "
  wait_for_key "$text" "quit"
  source end_experiment " "

  # Remove the lock
  rm "$EXPERIMENT_DIR/run_experiment.lock"
fi

popd >/dev/null || exit 1

exit 0
