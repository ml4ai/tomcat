#!/bin/bash

set -u

# We have to specify the full path of the python interpreter in the clients,
# otherwise it will get the usr/bin option that does not contain all the
# modules we need
PYTHON="/usr/local/bin/python3"

if [[ -z ${1+x} ]]; then
  PADDING=""
else
  PADDING=$1
fi

__start_clients() {
  local padding=$1
  __start_on_client "lion" "lion.local" "$LION_PARTICIPANT_ID" "$padding"
  __start_on_client "tiger" "tiger.local" "$TIGER_PARTICIPANT_ID" "$padding"
  __start_on_client "leopard" "leopard.local" "$LEOPARD_PARTICIPANT_ID" "$padding"
}

__start_on_cheetah() {
  local padding=$1
  local python_script_name=$2
  local log_suffix=$3
  local experimenter=$4
  local client_address="cheetah.local"

  local log_path="$EXPERIMENT_DIR/tmp/baseline_tasks_cheetah_${log_suffix}.log"

  local command="cd \$HOME/$SYSTEMS_DIR/tomcat/human_experiments/lab_software/tomcat-baseline-tasks "
  command+="&& $PYTHON ${python_script_name} -n $experimenter -i cheetah &> \$HOME$log_path &"
  # shellcheck disable=SC2029
  if ssh "$EXPERIMENT_USER@$client_address" "$command"; then
    local text="${padding}${YELLOW}Check the server to see if the process"
    text+="started successfully.${NC}"
    echo -e "$text"
  else
    local text="${padding}${RED}Error while starting the process. "
    text+="Check the log file in ${EMPH}$log_path${RED} for more information.${NC}"
    echo -e "$text"
  fi
}

__start_on_client() {
  local client_name=$1
  local client_address=$2
  local participant_id=$3
  local padding=$4

  if [[ $ALL -ne 1 ]]; then
    yes_no_question "${padding}Do you want to start the baseline tasks on ${EMPH}$client_name${NC}?"
    ans=$?
    padding="$padding "
  fi
  if [[ $ALL -eq 1 ]] || [[ $ans -eq 0 ]]; then
    # Start baseline task on a new desktop
    create_new_desktop_on_client "$client_address"

    local log_path=$EXPERIMENT_DIR/tmp/baseline_tasks_$client_name.log

    echo -e "${padding}Starting client on ${EMPH}$client_name${NC}..."

    # We set the volume to 0 so participants don't hear the Minecraft background song that is playing.
    ssh "$EXPERIMENT_USER@$client_address" "osascript -e 'set Volume 0'"

    local command="cd \$HOME/$SYSTEMS_DIR/tomcat/human_experiments/lab_software/tomcat-baseline-tasks "
    command+="&& $PYTHON run_client.py -n $participant_id -i $client_name  &> \$HOME$log_path &"
    # shellcheck disable=SC2029
    if ssh "$EXPERIMENT_USER@$client_address" "$command"; then
      local text="${padding}${YELLOW} Check the server to see if the "
      text+="connection was successfully established.${NC}"
      echo -e "$text"
    else
      local text="${padding}${RED} Error while trying to start client. "
      text+="Check the log file in ${EMPH}$log_path${RED} for more information.${NC}"
      echo -e "$text"
    fi
  fi
}

__start_server() {
  local padding=$1

  # Start server in a new terminal
  local data_dir="$EXPERIMENT_DIR/baseline_tasks"
  mkdir -p "$data_dir" >/dev/null

  local log_path=$EXPERIMENT_DIR/tmp/baseline_tasks_server.log

  local command="cd $HOME/$SYSTEMS_DIR/tomcat/human_experiments/lab_software/tomcat-baseline-tasks; "
  command+="python3 run_server.py -s $data_dir 2> $log_path"
  gnome-terminal -- bash -c "$command"
}

__start_baseline_tasks() {
  local padding=$1

  source collect_participant_ids "${padding} "

  if yes_no_question "${padding}Do you want to start the ${EMPH}server${NC}?"; then
    __start_server "${padding} "
  fi

  if yes_no_question "${padding}Do you want to start the ${EMPH}clients${NC}?"; then
    __start_clients "${padding} "
  fi

  if yes_no_question "${padding}Do you want to start ${EMPH}Competitive Ping-Pong${NC}?"; then
    __start_on_cheetah "${padding} " "run_client_experimenter.py" "competitive_ping_pong" "exp"
  fi

  if yes_no_question "${padding}Do you want to start ${EMPH}Cooperative Ping-Pong${NC}?"; then
    __start_on_cheetah "${padding} " "run_client_ai.py" "cooperative_ping_pong" "ai"
  fi

  echo -n -e "${padding}Press any key to validate the baseline tasks data."
  read -r

  source validate_baseline_tasks "$EXPERIMENT_DIR" "$PADDING"

  # Bring back the sound in the iMacs
  ssh "$EXPERIMENT_USER@lion.local" "osascript -e 'set Volume 2'"
  ssh "$EXPERIMENT_USER@tiger.local" "osascript -e 'set Volume 2'"
  ssh "$EXPERIMENT_USER@leopard.local" "osascript -e 'set Volume 2'"
}

__start_baseline_tasks "$PADDING"
