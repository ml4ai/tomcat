#!/bin/bash

set -u

source configuration_helpers
source collect_participant_ids

# We have to specify the full path of the python interpreter in the clients,
# otherwise it will get the usr/bin option that does not contain all the
# modules we need
PYTHON="/usr/local/bin/python3"

if [[ -z ${1+x} ]]; then
  # In case the script is executed standalone.
  text="${RED}Please provide an experiment directory as the first argument of "
  text+="the call to this script.${NC}"
  echo -e "$text"
  exit 1
fi
EXPERIMENT_DIR=$1

if [[ -z ${2+x} ]]; then
  PADDING=""
else
  PADDING=$2
fi

__start_server() {
  # Start server in a new terminal
  local data_dir="$EXPERIMENT_DIR/baseline_tasks"
  mkdir -p "$data_dir" >/dev/null

  local command="cd $HOME/$SYSTEMS_DIR/tomcat/human_experiments/lab_software/tomcat-baseline-tasks; "
  command+="python3 run_server.py -s $data_dir"
  gnome-terminal -- bash -c "$command"
}

__start_clients() {
  local padding=$1
  __start_on_client "lion" "lion.local" $LION_PARTICIPANT_ID "$padding"
  __start_on_client "tiger" "tiger.local" $TIGER_PARTICIPANT_ID "$padding"
  __start_on_client "leopard" "leopard.local" $LEOPARD_PARTICIPANT_ID "$padding"
}

__start_ai() {
  local padding=$1
  local client_address="cheetah.local"

  local log_path=$EXPERIMENT_DIR/tmp/baseline_tasks_cheetah.log

  while [[ $? -eq 0 ]]; do
    local command="cd \$HOME/$SYSTEMS_DIR/tomcat/human_experiments/lab_software/tomcat-baseline-tasks "
    command+="&& $PYTHON run_client_experimenter.py -n AI  &> \$HOME$log_path &"
    ssh $EXPERIMENT_USER@$client_address "$command"

    local status=0
    if [[ $? -eq 0 ]]; then
      command="cd \$HOME/$SYSTEMS_DIR/tomcat/human_experiments/lab_software/tomcat-baseline-tasks "
      command+="&& $PYTHON run_client_ai.py &> \$HOME$log_path &"
      ssh $EXPERIMENT_USER@$client_address "$command"
      status=$?
    else
      status=1
    fi

    if [[ $? -eq 0 ]]; then
      local text="${padding}${YELLOW}Check the server to see if the "
      text+="connection was successfully established.${NC}"
      echo -e "$text"
    else
      local text="${padding}${RED}Error while stating AI. "
      text+="Check the log file in ${EMPH}$log_path${RED} for more information.${NC}"
      echo -e "$text"
    fi
    yes_no_question "${padding}Do you want to retry to establish connection?"
  done
}

__start_on_client() {
  local client_name=$1
  local client_address=$2
  local participant_id=$3
  local padding=$4

  yes_no_question "${padding}Do you want to start the baseline tasks on ${EMPH}$client_name?${NC}"
  if [[ $? -eq 0 ]]; then
    # Start baseline task on a new desktop
    create_new_desktop_on_client $client_address

    local log_path=$EXPERIMENT_DIR/tmp/baseline_tasks_$client_name.log

    while [[ $? -eq 0 ]]; do
      local command="cd \$HOME/$SYSTEMS_DIR/tomcat/human_experiments/lab_software/tomcat-baseline-tasks "
      command+="&& $PYTHON run_client.py -n $participant_id  &> \$HOME$log_path &"
      ssh $EXPERIMENT_USER@$client_address "$command"

      if [[ $? -eq 0 ]]; then
        local text="${padding}${YELLOW}Check the server to see if the "
        text+="connection was successfully established.${NC}"
        echo -e "$text"
      else
        local text="${padding}${RED}Error while trying to start client. "
        text+="Check the log file in ${EMPH}$log_path${RED} for more information.${NC}"
        echo -e "$text"
      fi
      yes_no_question "${padding}Do you want to retry to establish connection?"
    done
  fi
}

__start_baseline_tasks() {
  yes_no_question "${PADDING}Do you want to start the ${EMPH}server?${NC}"
  if [[ $? -eq 0 ]]; then
    __start_server
  fi

  yes_no_question "${PADDING}Do you want to start the ${EMPH}clients?${NC}"
  if [[ $? -eq 0 ]]; then
    __start_clients "${PADDING} "
  fi

  yes_no_question "${PADDING}Do you want to start the ${EMPH}AI?${NC}"
    if [[ $? -eq 0 ]]; then
      __start_ai "${PADDING} "
    fi
}

__start_baseline_tasks
