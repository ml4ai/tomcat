#!/bin/bash

set -u

action=$1 # start or stop

if [[ -z ${2+x} ]]; then
  padding=""
else
  padding=$2
fi

if [[ "$action" != "start" ]] && [[ "$action" != "stop" ]]; then
  echo -e "${RED}{$padding}The second parameter os this script must be a action form the list [start, stop].${NC}"
fi

# Error codes
never_launched_error_code=1
on_launch_error_code=2
stopped_error_code=3
log_file_deleted_error_code=4

wait_for_launch_timeout=300 # 5 minutes

_monitor_launch() {
  local log_file=$1
  local pid_file=$2

  # It can take a while for the file with the PID be saved on the experiment folder because of network delay.
  # The iMACs save the file in a shared directory, so it's not readily available for the server. Here we try
  # 3 times before assuming the file was never created.
  local num_trials=0
  while [ $num_trials -lt 3 ]; do
    if [[ -e "$log_file" ]]; then
      break
    fi

    # Wait a bit and check again
    sleep 5
    ((num_trials++))
  done

  if [[ ! -e "$log_file" ]]; then
    return $never_launched_error_code
  fi

  local num_seconds=0
  while [ $num_seconds -lt $wait_for_launch_timeout ]; do
    if [[ -e "$log_file" ]]; then
      if [[ $(grep -c '\[ERROR\]' "$log_file") -ne 0 ]]; then
        return $on_launch_error_code
      fi

      if [[ $(grep -c '\[INFO\] Stopped' "$log_file") -ne 0 ]]; then
        return $stopped_error_code
      fi

      if [[ $(grep -c 'awaiting Trial Start message' "$log_file") -ne 0 ]]; then
        # Waiting for MQTT message to start recording. Successfully launched
        return 0
      fi

      if [[ $(grep -c '\[INFO\] Started' "$log_file") -ne 0 ]]; then
        # Started recording. Successfully launched
        return 0
      fi
    else
      return $log_file_deleted_error_code
    fi

    sleep 1
    ((num_seconds++))
  done

  return $never_launched_error_code
}

_record_on_client() {
  # Just calls the executable on a client machine and leaves. It does not wait for status.
  local client_name=$1
  local client_address=$2
  local participant_id=$3
  local tmp_file_root_dir="$EXPERIMENT_DIR/tmp/audio_$client_name"
  local log_file="$tmp_file_root_dir.log"
  local pid_file="$tmp_file_root_dir.pid"

  # Remove old files not to confuse the monitoring program
  rm "$tmp_file_root_dir.log" &> /dev/null
  rm "$tmp_file_root_dir.pid" &> /dev/null

  local project_dir="\$HOME/$SYSTEMS_DIR/tomcat"

  local audio_dir="$EXPERIMENT_DIR/$client_name/audio/block_$EXPERIMENT_BLOCK"

  if [[ "$client_name" == "cat" ]]; then
    local exec_path="$project_dir/human_experiments/scripts/local/record_audio"
    local command="$exec_path $audio_dir $log_file $pid_file"
    local username="cat"
  else
    # If the client is one of the iMacs, we want to call the audio streamer instead.
    local exec_path="$project_dir/human_experiments/scripts/local/stream_audio"
    local command="$exec_path \$HOME/$audio_dir tom.local tom.local $participant_id \$HOME/$log_file \$HOME/$pid_file"
    local username="$EXPERIMENT_USER"
  fi

  # shellcheck disable=SC2029
  ssh "$username@$client_address" "$command"
}

_start_recording_on_client() {
  # Initial call to the executable on a client machine
  local client_name=$1
  local client_address=$2
  local participant_id=$3
  local padding=$4

  if [[ $ALL -ne 1 ]]; then
    yes_no_question "${padding}Do you want to start recording on ${EMPH}$client_name${NC}?"
    ans=$?
    padding="$padding "
  fi
  if [[ $ALL -eq 1 ]] || [[ $ans -eq 0 ]]; then

    local tmp_file_root_dir="$EXPERIMENT_DIR/tmp/audio_$client_name"
    local log_file="$tmp_file_root_dir.log"
    local pid_file="$tmp_file_root_dir.pid"

    # Check if there's already a process running so we don't start the process twice.
    if [[ -e "$pid_file" ]]; then
      local pid
      pid=$(cat "$pid_file")

      local project_dir="\$HOME/$SYSTEMS_DIR/tomcat"
      local check_exec_path="$project_dir/human_experiments/scripts/local/is_process_active"
      local command="$check_exec_path $pid"

      if [[ "$client_name" == "cat" ]]; then
        local username="cat"
      else
        local username="$EXPERIMENT_USER"
      fi

      # shellcheck disable=SC2029
      if ssh "$username@$client_address" "$command" >/dev/null; then
        echo -e "${YELLOW}${padding}Aborting. The process $pid is already recording.${NC}"
        return
      fi
    fi

    echo -e "${padding}Starting recording on ${EMPH}$client_name${NC}."
    _record_on_client "$client_name" "$client_address" "$participant_id"
  fi
}

_monitor_launch_on_client() {
  # Monitors a previous call to the recording program in a client. Let's the user retry the program.
  local client_name=$1
  local client_address=$2
  local participant_id=$3
  local padding=$4

  echo -e "${padding}Waiting for the program to launch on ${EMPH}$client_name${NC}..."
  padding="$padding "

  while true; do
    local tmp_file_root_dir="$EXPERIMENT_DIR/tmp/audio_$client_name"
    local log_file="$tmp_file_root_dir.log"
    local pid_file="$tmp_file_root_dir.pid"

    _monitor_launch "$log_file" "$pid_file"
    local error_code=$?

    if [[ $error_code -eq 0 ]]; then
      echo -e "${padding}${GREEN}The program has successfully launched on ${EMPH}$client_name${GREEN}.${NC}"
      return
    elif [[ $error_code -eq $never_launched_error_code ]]; then
      # We don't treat as an error. Just show a warning.
      echo -e "${padding}${YELLOW}The program was never launched.${NC}"
      return
    elif [[ $error_code -eq $log_file_deleted_error_code ]]; then
      echo -e "${padding}${YELLOW}The log file was deleted. Cannot tell if the program was properly launched${NC}"
      return
    elif [[ $error_code -eq $on_launch_error_code ]]; then
      echo -e "${padding}${RED}Error on program launch.${NC}"
    elif [[ $error_code -eq $stopped_error_code ]]; then
      echo -e "${padding}${RED}The program stopped running abruptly.${NC}"
    fi

    if [[ $error_code -ne 0 ]]; then
      echo -e "${padding}Look at the logs in $log_file for more details."
      retry_question "$padding"
      retry=$?

      if [[ $retry -eq 0 ]]; then
        _record_on_client "$client_name" "$client_address" "$participant_id"
      else
        break
      fi
    fi
  done
}

_monitor_launch_on_clients() {
  local padding=$1

  echo -e "${padding}Waiting for the program to launch on the clients..."

  _monitor_launch_on_client "lion" "lion.local" "$LION_PARTICIPANT_ID" "$padding "
  _monitor_launch_on_client "tiger" "tiger.local" "$TIGER_PARTICIPANT_ID" "$padding "
  _monitor_launch_on_client "leopard" "leopard.local" "$LEOPARD_PARTICIPANT_ID" "$padding "
  _monitor_launch_on_client "cat" "cat.local" "" "$padding "
}

_stop_record_on_client() {
  local client_name=$1
  local client_address=$2
  local padding=$3

  if [[ $ALL -ne 1 ]]; then
    yes_no_question "${padding}Do you want to stop recording on ${EMPH}$client_name${NC}?"
    ans=$?
    padding="$padding "
  fi
  if [[ $ALL -eq 1 ]] || [[ $ans -eq 0 ]]; then
    echo -e "${padding}Stopping recording on ${EMPH}$client_name${NC}."

    local pid_file="$EXPERIMENT_DIR/tmp/audio_$client_name.pid"
    local pid
    pid=$(cat "$pid_file")

    local project_dir="\$HOME/$SYSTEMS_DIR/tomcat"

    local exec_path="$project_dir/human_experiments/scripts/local/kill_program"
    local command="$exec_path $pid"

    if [[ "$client_name" == "cat" ]]; then
      local username="cat"
    else
      local username="$EXPERIMENT_USER"
    fi

    # shellcheck disable=SC2029
    ssh "$username@$client_address" "$command"
  fi
}

_start_recording() {
  local padding=$1

  source collect_participant_ids "$padding"

  # Start at the same time in all clients
  _start_recording_on_client "lion" "lion.local" "$LION_PARTICIPANT_ID" "$padding"
  _start_recording_on_client "tiger" "tiger.local" "$TIGER_PARTICIPANT_ID" "$padding"
  _start_recording_on_client "leopard" "leopard.local" "$LEOPARD_PARTICIPANT_ID" "$padding"

  # CAT is responsible for recording the central audio from the omnidirectional microphone
  _start_recording_on_client "cat" "cat.local" "" "$padding"

  # Wait until the program have launched in all the clients
  _monitor_launch_on_clients "$padding"
}

_stop_recording() {
  _stop_record_on_client "lion" "lion.local" "$padding"
  _stop_record_on_client "tiger" "tiger.local" "$padding"
  _stop_record_on_client "leopard" "leopard.local" "$padding"
  _stop_record_on_client "cat" "cat.local" "$padding"
}

if [[ "$action" == "start" ]]; then
  _start_recording "$padding"
else
  _stop_recording "$padding"
fi
