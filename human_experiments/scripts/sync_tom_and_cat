#!/bin/bash 

##############################################################################
#
# Identification:
#     Synchronizes data between two cross mounted disks on LangLab computers
#     tom and cat. 
#
# Synopsis:
#      sync_tom_and_cat [ -q ]
#
# Description:
#     This script synchronizes data between two cross mounted disks on LangLab
#     computers tom and cat. The two data stores are set near the beginning of
#     the helper script sync_tom_and_cat, and we assume they will not change
#     very often. 
#
#     This script should be run as either user tom on machine tom or user cat on
#     machine cat.  Generally, it should be called right after data collection
#     by the master "uber" script.  In addition, it should be called by the
#     scripts that pull data IVILAB servers. 
#     
#     We assume that this script lives in ${HOME}/tomcat/scripts, which should
#     be symbolic link to the current code repo. 
#
#     This script may rely on the UID for tom on tom being the same as the UID for
#     cat on cat. This "feature" might be confusing, but so far it has not
#     caused grief. Also, being in group "langlab" should also provide needed
#     permissions as long as the GID is shared over tom and cat. 
#
# Output: 
#     All output, including error output, goes to stdout, and is also appended
#     to ${HOME}/tomcat/logs/sync_tom_and_cat.log.  We can ask for no output on
#     stdout with  optional argument '-q'. 
#
#     This scripts respects the setting of IVI_VERBOSE. If it is set to "1",
#     then we provide more output. This can also be achieved using the argument
#     '-v'. For more output, either set IVI_VERBOSE_2 to 1 or use '-v2', and for
#     even more set IVI_VERBOSE_3 or usr '-v3'
#
# Exit status:
#     Following unix convention, this script exits with 0 on success, and
#     non-zero if there was an error. 
#
# Author:
#     Kobus Barnard
#
##############################################################################

# TOMCAT_DIR is either the github clone, a link to it, or a directory with
# needed links that mimics the github clone structure where needed. 
export TOMCAT_DIR="${HOME}/tomcat/" 

set -u 

# We could use $0, but this is less readable as $0 is how it was called, not the
# name. 
script_name="sync_tom_and_cat"

source ${TOMCAT_DIR}shared_code/bash/ivi_preamble.bash  

# We control the meaning of basic commands by limiting the path to standard root
# controlled directories. We also add all the tomcat script directories we need. 
# 
export PATH="/usr/bin:/bin:${TOMCAT_DIR}/human_experiments/scripts"

# If the preliminary commands fail, we are not ready report anything so we
# simply die.

set -e

# Revoke possible removal of group perms (if we are running as root) and don't
# permit others any access. 
umask 0007

log_dir=${TOMCAT_DIR}logs/
mkdir -p ${log_dir}
log_file="${log_dir}sync_tom_and_cat.log"
# Test writing to log_file.
touch "${log_file}" 

# We want to execute sync_tom_and_cat_2, and report its error. This is the only
# command that really counts. Any other issues are about logging, but where
# would we report that? The fall back would be to send mail---maybe in the next
# version. For now, use '+e' so at least the main command gets tried. 
#
set +e 

eval echo "============================================================================" ${plumbing} ${log_file}
eval echo "Script sync_tom_and_cat is starting: $(date)" ${plumbing} ${log_file}
eval echo " " ${plumbing} ${log_file}

set -o pipefail 

# The command 'sg' is for unix only. 
eval sg langlab -c 'sync_tom_and_cat_2' ${plumbing} ${log_file}

exit_status=$?

eval echo " " ${plumbing} ${log_file}
eval echo "Script sync_tom_and_cat exiting with status ${exit_status} on: $(date)" ${plumbing} ${log_file}
eval echo "::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::" ${plumbing} ${log_file}

exit ${exit_status}

