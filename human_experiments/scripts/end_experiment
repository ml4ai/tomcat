#!/bin/bash

set -u

if [[ -z ${1+x} ]]; then
  PADDING=""
else
  PADDING=$1
fi

__stop_minecraft() {
  local client_name=$1
  local client_address=$2
  local padding=$3

  local command="cd \$HOME/$SYSTEMS_DIR/tomcat/human_experiments/scripts/ && "
  command+="./kill_minecraft \"$padding \""

  echo -e "${padding}Stopping ${EMPH}Minecraft${NC}..."
  local stopped="n"
  while [[ $stopped != "y" ]]; do
    # shellcheck disable=SC2029
    if ssh "$EXPERIMENT_USER@$client_address" "$command"; then
      echo -e "${padding}${GREEN} ${EMPH}Minecraft${GREEN} successfully stopped.${NC}"
      stopped="y"
    else
      echo -e "${padding}${RED} Failed to stop ${EMPH}Minecraft${RED}.${NC}"
      if ! yes_no_question "${padding} Do you want to ${EMPH}RETRY${NC}?"; then
        break
      fi
    fi
  done
}

__stop_port_forwarding() {
  local client_name=$1
  local client_address=$2
  local padding=$3

  echo -e "${padding}Stopping port forwarding..."
  local stopped="n"
  local command="pkill socat"
  while [[ $stopped != "y" ]]; do
    # shellcheck disable=SC2029
    if ssh "$EXPERIMENT_USER@$client_address" "$command" > /dev/null; then
      echo -e "${padding}${GREEN} Port forwarding successfully stopped.${NC}"
      stopped="y"
    else
      echo -e "${padding}${RED} Failed to stop port forwarding.${NC}"
      if ! yes_no_question "${padding} Do you want to ${EMPH}RETRY${NC}?"; then
        break
      fi
    fi
  done
}

__close_application() {
  local client_name=$1
  local client_address=$2
  local app_name=$3
  local padding=$4

  local command="osascript \$HOME/$SYSTEMS_DIR/tomcat/human_experiments/scripts/macos/close_application.scpt "
  command+="\"$app_name\""
  # shellcheck disable=SC2029
  ssh "$EXPERIMENT_USER@$client_address" "$command" &>/dev/null
  echo -e "${padding}${GREEN}${EMPH}$app_name${GREEN} successfully closed.${NC}"

  # The apple script returns exit code 1 because closing an application is an
  # interruption. So, we do not check for a return code and assume the
  # application was closed. In all the tests performed, the applications closed
  # properly. In case they don't close, it's ok because they will close when the
  # machines are powered off.
}

__close_applications() {
  local client_name=$1
  local client_address=$2
  local padding=$3

  echo -e "${padding}Closing ${EMPH}all applications${NC}..."
  __close_application "$client_name" "$client_address" "Google Chrome" "$padding "
  __close_application "$client_name" "$client_address" "Terminal" "$padding "
}

__remove_pupil_symlink() {
  local client_name=$1
  local client_address=$2
  local padding=$3

  echo -e "${padding}Removing ${EMPH}Pupil Symlink${NC}..."
  local command="\$HOME/$SYSTEMS_DIR/tomcat/human_experiments/scripts/remove_pupil_symlink"
  # shellcheck disable=SC2029
  ssh "$EXPERIMENT_USER@$client_address" "$command"
}

__close_extra_desktops() {
  local client_name=$1
  local client_address=$2
  local padding=$3

  echo -e "${padding}Closing ${EMPH}extra desktops${NC}..."
  local command="osascript \$HOME/$SYSTEMS_DIR/tomcat/human_experiments/scripts/macos/close_extra_desktops.scpt"

  local closed="n"
  while [[ $closed != "y" ]]; do
    # shellcheck disable=SC2029
    if ssh "$EXPERIMENT_USER@$client_address" "$command" >/dev/null; then
      echo -e "${padding}${GREEN} ${EMPH}Extra desktops${GREEN} successfully closed.${NC}"
      closed="y"
    else
      echo -e "${padding}${RED} Failed to close ${EMPH}extra desktops${RED}.${NC}"
      if yes_no_question "${padding} Do you want to ${EMPH}RETRY${NC}?"; then
        break
      fi
    fi
  done
}

__cleanup_on_client() {
  local client_name=$1
  local client_address=$2
  local padding=$3

  if [[ $ALL -ne 1 ]]; then
    yes_no_question "${padding}Do you want to ${EMPH}END${NC} the experiment on ${EMPH}$client_name${NC}?"
    ans=$?
    padding="$padding "
  fi
  if [[ $ALL -eq 1 ]] || [[ $ans -eq 0 ]]; then
    echo -e "${padding}Ending experiment on ${EMPH}$client_name${NC}..."
    __stop_minecraft "$client_name" "$client_address" "$padding "
    __stop_port_forwarding "$client_name" "$client_address" "$padding "
    __close_applications "$client_name" "$client_address" "$padding "
    __remove_pupil_symlink "$client_name" "$client_address" "$padding "
    __close_extra_desktops "$client_name" "$client_address" "$padding "
  fi
}

__clean_tmp_directory() {
  # We remove the .pid files from the tmp directory as we don't need to store the process IDs after the experiment.
  echo -e "${padding}Removing .pid files from the temporary directory."
  rm "$EXPERIMENT_DIR/tmp/*.pid" > /dev/null
}

__freeze_experiment_data() {
  local padding=$1

  # Making the directory readonly
  echo -e "${padding}${EMPH}Freezing${NC} data..."

  local frozen="n"
  while [[ $frozen != "y" ]]; do
    if chmod a=r "$EXPERIMENT_DIR" >/dev/null; then
      echo -e "${padding}${GREEN} Data successfully frozen.${NC}"
      frozen="y"
    else
      echo -e "${padding}${RED} Failed to freeze data.${NC}"
      if ! yes_no_question "${padding} Do you want to ${EMPH}RETRY${NC}?"; then
        break
      fi
    fi
  done
}

__backup_experiment_data() {
  local padding=$1

  echo -e "${padding}${EMPH}Backing up${NC} data..."
  echo -e "${padding}${YELLOW} Yet to be implemented!${NC}"

  # TODO
  # here comes a call to Kobus' script to synchronize data between CAT, TOM
  # and IVILAB servers
}

__cleanup() {
  local padding=$1
  echo -e "${padding}Ending experiment..."

  __cleanup_on_client "lion" "lion.local" "$padding "
  __cleanup_on_client "tiger" "tiger.local" "$padding "
  __cleanup_on_client "leopard" "leopard.local" "$padding "

  source stop_testbed "$EXPERIMENT_DIR" "$padding "
  __clean_tmp_directory "$padding "
  __freeze_experiment_data "$padding "
  __backup_experiment_data "$padding "
}

__cleanup "$PADDING"
