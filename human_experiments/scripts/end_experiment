#!/bin/bash

set -u

source configuration_helpers

if [[ -z ${1+x} ]]; then
  # In case the script is executed standalone.
  text="${RED}Please provide an experiment directory as the first argument of "
  text+="the call to this script.${NC}"
  echo -e "$text"
  exit 1
fi
EXPERIMENT_DIR=$1

if [[ -z ${2+x} ]]; then
  PADDING=""
else
  PADDING=$2
fi

__stop_face_and_screen_recording() {
  local client_name=$1
  local client_address=$2
  local padding=$3

  echo -e "${padding}Stopping ${EMPH}Face and Screen Recording${NC}..."
  local stopped="n"
  while [[ $stopped != "y" ]]; do
    ssh $EXPERIMENT_USER@$client_address "pkill ffmpeg" >/dev/null
    if [[ $? -eq 0 ]]; then
      echo -e "${padding}${GREEN} ${EMPH}Face and Screen Recording${GREEN} successfully stopped${NC}."
      stopped="y"
    else
      echo -e "${padding}${RED} Failed to stop ${EMPH}Face and Screen Recording${NC}."
      yes_no_question "${padding} Do you want to ${EMPH}RETRY${NC}."
      if [[ $? -ne 0 ]]; then
        break
      fi
    fi
  done
}

__stop_minecraft() {
  local client_name=$1
  local client_address=$2
  local padding=$3

  local command="./\$HOME/$SYSTEMS_DIR/tomcat/human_experiments/scripts/kill_minecraft "
  command+="$EXPERIMENT_DIR ${padding}"

  echo -e "${padding}Stopping ${EMPH}Minecraft${NC}..."
  local stopped="n"
  while [[ $stopped != "y" ]]; do
    ssh $EXPERIMENT_USER@$client_address "$command" >/dev/null
    if [[ $? -eq 0 ]]; then
      echo -e "${padding}${GREEN} ${EMPH}Minecraft${GREEN} successfully stopped${NC}."
      stopped="y"
    else
      echo -e "${padding}${RED} Failed to stop ${EMPH}Minecraft${NC}."
      yes_no_question "${padding} Do you want to ${EMPH}RETRY${NC}."
      if [[ $? -ne 0 ]]; then
        break
      fi
    fi
  done
}

__close_application() {
  local client_name=$1
  local client_address=$2
  local app_name=$3
  local padding=$4

  local command="osascript -e 'tell application \"${app_name}\" to quit'"
  local closed="n"
  while [[ $closed != "y" ]]; do
    ssh $EXPERIMENT_USER@$client_address "$command" >/dev/null
    if [[ $? -eq 0 ]]; then
      echo -e "${padding}${GREEN} ${EMPH}$app_name${GREEN} successfully closed${NC}."
      closed="y"
    else
      echo -e "${padding}${RED} Failed to close ${EMPH}$app_name${NC}."
      yes_no_question "${padding} Do you want to ${EMPH}RETRY${NC}."
      if [[ $? -ne 0 ]]; then
        break
      fi
    fi
  done
}

__close_applications() {
  local client_name=$1
  local client_address=$2
  local padding=$3

  echo -e "${padding}Closing ${EMPH}all applications${NC}..."
  __close_application $client_name $client_address "Mumble" "$padding "
  __close_application $client_name $client_address "Aurora" "$padding "
  __close_application $client_name $client_address "Pupil Capture" "$padding "
  __close_application $client_name $client_address "Chrome" "$padding "
  __close_application $client_name $client_address "Terminal" "$padding "
}

__close_extra_desktops() {
  local client_name=$1
  local client_address=$2
  local padding=$3

  echo -e "${padding}Closing ${EMPH}extra desktops${NC}..."
  local command="osascript \$HOME/$SYSTEMS_DIR/tomcat/human_experiments/scripts/macos/close_extra_desktops.scpt"

  local closed="n"
  while [[ $closed != "y" ]]; do
    ssh $EXPERIMENT_USER@$client_address "$command" >/dev/null
    if [[ $? -eq 0 ]]; then
      echo -e "${padding}${GREEN} ${EMPH}Extra desktops${GREEN} successfully closed${NC}."
      closed="y"
    else
      echo -e "${padding}${RED} Failed to close ${EMPH}extra desktops${NC}."
      yes_no_question "${padding} Do you want to ${EMPH}RETRY${NC}?"
      if [[ $? -ne 0 ]]; then
        break
      fi
    fi
  done
}

__cleanup_on_client() {
  local client_name=$1
  local client_address=$2
  local padding=$3

  yes_no_question "${padding}Do you want to ${EMPH}end the experiment${NC} on ${EMPH}$client_name?${NC}"
  if [[ $? -eq 0 ]]; then
    __stop_face_and_screen_recording $client_name $client_address "$padding "
    __stop_minecraft $client_name $client_address "$padding "
    __close_applications $client_name $client_address "$padding "
    __close_extra_desktops $client_name $client_address "$padding "
  fi

}

__freeze_experiment_data() {
  local padding=$1

  # Making the directory readonly
  echo -e "${padding}${EMPH}Freezing${NC} data..."

  local frozen="n"
  while [[ $frozen != "y" ]]; do
    chmod a=r "$EXPERIMENT_DIR" >/dev/null
    if [[ $? -eq 0 ]]; then
      echo -e "${padding}${GREEN} Data successfully frozen${NC}."
      frozen="y"
    else
      echo -e "${padding}${RED} Failed to freeze data${NC}."
      yes_no_question "${padding} Do you want to ${EMPH}RETRY${NC}?"
      if [[ $? -ne 0 ]]; then
        break
      fi
    fi
  done
}

__backup_experiment_data() {
  local padding=$1

  echo -e "${padding}${EMPH}Backing up${NC} data..."

  # TODO
  # here comes a call to Kobus' script to synchronize data between CAT, TOM
  # and IVILAB servers
}

__monitor_testbed_stop() {
  local log_path=$1
  local testbed_pid=$2
  local padding=$3

  echo -e "${padding}Waiting for stop..."

  # Wait till the log file actually exists
  while [ ! -f $log_path ]; do
    sleep 1
  done

  local num_seconds=0
  while [ $num_seconds -lt $SECONDS_TO_WAIT ]; do
    if [[ -e "${log_path}" ]]; then
      have_line="$(grep -c 'Removing network asist_net' ${log_path})"
      if [[ ${have_line} -ne 0 ]]; then
        return 0
      fi
    else
      return 1
    fi

    # TODO - fix this because the process might end but the writer buffer
    #  to the log file might still be running I guess
    ps $testbed_pid >&/dev/null
    if [[ $? -ne 0 ]]; then
      return 1
    fi

    sleep 1
    let num_seconds+=1
  done

  return 1
}

__stop_testbed() {
  local padding=$1

  # Bring the testbed up and save logs
  local log_path=$EXPERIMENT_DIR/tmp/testbed_down.log
  local testbed_stopped="n"

  echo -e "${padding}Stopping the ${EMPH}Testbed${NC}..."
  while [[ $testbed_stopped == "n" ]]; do
    pushd $HOME/$SYSTEMS_DIR/testbed/Local >/dev/null
      sudo ./testbed_down.sh &>$log_path &

      # Wait for a while to guarantee the log file was created
      sleep 1
      __monitor_testbed_stop $log_path $! "$padding "

      if [[ $? -eq 0 ]]; then
        testbed_stopped="y"
        echo -e "${PADDING}${GREEN} Testbed successfully stopped.${NC}"
      else
        text="${PADDING}${RED} Error while stopping the testbed. Check the log file in "
        text+="${EMPH}$log_path${RED} for more details.${NC}"
        echo -e "$text"
        echo -n -e "${PADDING}Press any key to ${EMPH}RETRY${NC}: "
        read -r
      fi
    popd >/dev/null
  done

}

__cleanup() {
  local padding=$1
  echo -e "${padding}Ending ${EMPH}experiment${NC}..."

  __cleanup_on_client "lion" "lion.local" "$padding "
  __cleanup_on_client "tiger" "tiger.local" "$padding "
  __cleanup_on_client "leopard" "leopard.local" "$padding "

  __stop_testbed "$padding"
  __freeze_experiment_data "$padding "
  __backup_experiment_data "$padding "
}

__cleanup "$PADDING"
