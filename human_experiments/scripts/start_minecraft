#!/bin/bash

set -u

SECONDS_TO_WAIT=300

if [[ -z ${1+x} ]]; then
  PADDING=""
else
  PADDING=$1
fi

__start_on_client() {
  local client_name=$1
  local client_address=$2
  local padding=$3

  if [[ $ALL -ne 1 ]]; then
    yes_no_question "${padding}Do you want to start ${EMPH}Minecraft${NC} on ${EMPH}$client_name${NC}?"
    ans=$?
    padding="$padding "
  fi
  if [[ $ALL -eq 1 ]] || [[ $ans -eq 0 ]]; then
    # Close instructive video if it's being displayed
    local command="osascript -e \"tell application \\\"QuickTime\\\" to quit\""
    # shellcheck disable=SC2029
    ssh "$EXPERIMENT_USER@$client_address" "$command"

    # Start Minecraft on a new desktop
    create_new_desktop_on_client "$client_address"

    local common_file_path="$EXPERIMENT_DIR/tmp/minecraft_$client_name"
    local log_path="$common_file_path".log
    local pid_path="$common_file_path".pid
    command="osascript \$HOME/$SYSTEMS_DIR/tomcat/human_experiments/scripts/macos/launch_minecraft.scpt "
    command+="\$HOME/$SYSTEMS_DIR \$HOME$log_path \$HOME$pid_path"

    echo -e "${padding}Launching ${EMPH}Minecraft${NC} on ${EMPH}$client_name${NC}..."
    # Remove files to avoid thinking Minecraft was successfully launched because
    # of a previous successful launching
    rm "$log_path" &>/dev/null
    rm "$pid_path" &>/dev/null

    # shellcheck disable=SC2029
    ssh "$EXPERIMENT_USER@$client_address" "$command"
  fi
}

__monitor_launch_on_machine() {
  local client_name=$1
  local padding=$2

  local common_file_path="$EXPERIMENT_DIR/tmp/minecraft_$client_name"
  local log_path="$common_file_path".log
  local pid_path="$common_file_path".pid

  if [[ ! -e "$pid_path" ]]; then
    # Minecraft was not launched on the client
    local text="${padding}${YELLOW}${EMPH}Minecraft${YELLOW} was never launched on "
    text+="${EMPH}$client_name${YELLOW}.${NC}"
    echo -e "$text"
    return 0
  fi

  local num_seconds=0
  while [ $num_seconds -lt $SECONDS_TO_WAIT ]; do
    if [[ -e "$log_path" ]]; then
      launch_client_failed=$(grep -c 'launchClient FAILED' "$log_path")
      if [[ ${launch_client_failed} -ne 0 ]]; then
        local text="${padding}${RED}Error while launching ${EMPH}Minecraft${RED} on ${EMPH}"
        text+="${client_name}${RED}. Check the log file in ${EMPH}$log_path${RED} "
        text+="for more details.${NC}"
        echo -e "$text"
        return 1
      fi

      have_line=$(grep -c 'CLIENT enter state: DORMANT' "$log_path")
      if [[ ${have_line} -ne 0 ]]; then
        local text="${padding}${EMPH}Minecraft${GREEN} successfully launched on "
        text+="${EMPH}$client_name${GREEN}.${NC}"
        echo -e "$text"
        return 0
      fi
    else
      local text="${padding}${RED}Error while launching ${EMPH}Minecraft${RED} on ${EMPH}"
      text+="${client_name}${RED}. The log file ${EMPH}$log_path${RED} "
      text+="does not exist anymore.${NC}"
      echo -e "$text"
      return 1
    fi

    sleep 1
    (( num_seconds++ ))
  done

  local text="${padding}${RED}Minecraft is still launching after "
  text+="${EMPTH}$SECONDS_TO_WAIT${RED}.${NC}"
  echo -e "$text"

  # TODO - kill minecraft on the client machine
  text="${padding}${RED} Please manually kill any Minecraft process "
  text+="on ${EMPH}$client_name${RED}.${NC}"
  echo -e "$text"

  return 1
}

__monitor_launch() {
  local padding=$1

  echo -e "${padding}Monitoring launch..."

  local all_launched="n"
  while [[ $all_launched != "y" ]]; do
    all_launched="y"

    if ! __monitor_launch_on_machine "lion" "$padding "; then
      all_launched="n"
    fi

    if ! __monitor_launch_on_machine "tiger" "$padding "; then
      all_launched="n"
    fi

    if ! __monitor_launch_on_machine "leopard" "$padding "; then
      all_launched="n"
    fi
  done

  __monitor_launch_on_machine "server" "$padding "
}

__resize_and_reposition_on_client() {
  local client_name=$1
  local client_address=$2

  local common_file_path="$EXPERIMENT_DIR/tmp/minecraft_$client_name"
  local pid_path="$common_file_path".pid

  if [[ -e "$pid_path" ]]; then
    local command="osascript \$HOME/$SYSTEMS_DIR/tomcat/human_experiments/scripts/macos/resize_minecraft_window.scpt"
    # shellcheck disable=SC2029
    ssh "$EXPERIMENT_USER@$client_address" "$command"
  fi
}

__resize_and_reposition_minecraft() {
  __resize_and_reposition_on_client "lion" "lion.local"
  __resize_and_reposition_on_client "tiger" "tiger.local"
  __resize_and_reposition_on_client "leopard" "leopard.local"
}

__start_locally() {
  local padding=$1

  echo -e "${padding}Launching ${EMPH}Minecraft${NC} locally..."

  local common_file_path="$EXPERIMENT_DIR/tmp/minecraft_server"
  local log_path="$common_file_path".log
  local pid_path="$common_file_path".pid

  # Remove files to avoid thinking Minecraft was successfully launched because
  # of a previous successful launching
  rm "$log_path" &>/dev/null
  # shellcheck disable=SC2086
  rm $pid_path &>/dev/null

  # shellcheck disable=SC1090
  source "$HOME/$SYSTEMS_DIR/tomcat/tools/launch_minecraft" &>"$log_path" &
  echo $! > "$pid_path"
}

__start_minecraft() {
  local padding=$1

  echo -e "${PADDING}Launching ${EMPH}Minecraft${NC}..."
  __start_on_client "lion" "lion.local" "$padding "
  __start_on_client "tiger" "tiger.local" "$padding "
  __start_on_client "leopard" "leopard.local" "$padding "
  __start_locally "$padding "

  # Wait for a while so that the files containing the log and pid have time to
  # be created
  sleep 1
  __monitor_launch "$padding "
  __resize_and_reposition_minecraft
  source collect_player_names "$EXPERIMENT_DIR" "$padding "
}

__start_minecraft "$PADDING"
