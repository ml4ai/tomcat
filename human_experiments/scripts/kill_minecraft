#!/bin/bash

# Adapted from tools/kill_minecraft

set -u

source configuration_helpers

if [[ -z ${1+x} ]]; then
  # In case the script is executed standalone.
  text="${RED}Please provide the minecraft process ID to the "
  text+="the call to this script.${NC}"
  echo -e "$text"
  exit 1
fi
MINECRAFT_PID=$1

if [[ -z ${2+x} ]]; then
  PADDING=""
else
  PADDING=$2
fi

to_kill=""

ps ${MINECRAFT_PID} >&/dev/null
if [[ $? -eq 0 ]]; then
  # Linux often provides a way to get the process tree (e.g., using
  # the -H argument), but macOS does not. Rather than get more
  # packages, and reason about variations, we will build our own tree,
  # with the knowledge that it will only be children and grand
  # children.

  to_kill="${to_kill} ${MINECRAFT_PID}"

  children=$(ps -u ${USER} -o pid,ppid | grep " ${MINECRAFT_PID}" | sed 's#^\([0-9][0-9]*\).*#\1#')

  if [[ -n "${children}" ]]; then
    to_kill="${to_kill} ${children}"

    for child in "${children}"; do
      grand_children=$(ps -u ${USER} -o pid,ppid | grep " ${child}" | sed 's#^\([0-9][0-9]*\).*#\1#')
      to_kill="${to_kill} ${grand_children}"
    done
  fi
fi

if [[ -n "${to_kill}" ]]; then
  # We sleep between operations to get off the CPU and give programs a chance
  # to cleanup.

  for proc in ${to_kill}; do
    ps ${proc} >&/dev/null
    if [[ $? -eq 0 ]]; then
      kill -15 ${proc}
      echo -e "${PADDING}${GREEN}Process ${EMPH}${proc}${GREEN} killed."
      sleep 1
    else
      text="${PADDING}${YELLOW}Process ${EMPH}${proc}${YELLOW} no longer "
      text+="exists, so we don't need to kill it${NC}."
      echo -e "$text"
    fi
  done

  for proc in ${to_kill}; do
    ps ${proc} >&/dev/null
    if [[ $? -eq 0 ]]; then
      kill -9 ${proc}
      echo -e "${PADDING}${GREEN}Process ${EMPH}${proc}${GREEN} killed."
      sleep 1
    fi
  done
fi

exit 0
