#!/bin/bash 

##############################################################################
#
# Identification:
#     
#
# Description:
#      We backup tom can cat (IN TRANSITION) on i02 (v07-new) disk /backup
#      which is mirrored on i01 by a cron job independing of this script.
#      
#      Eventually, this will run on the ToMCAT data server. The hardcoded
#      locaations will need to change. 
#
# Output:
#     
#
# Exit status:
#     Following unix convention, this script exits with 0 on success, and
#     non-zero if there was an error. 
#
# Author:
#     Kobus Barnard
#
##############################################################################

set -u

echo "---------------------------------------------------------------------------------------------" 
echo "Script backup_tom_and_cat_2 is starting: $(date)" 
echo " "

# This can work on any machine with the correct fancy .ssh/config file. 
export ROOT_USER_ON_CAT="root@10.192.234.250"
export ROOT_USER_ON_TOM="root@10.192.234.251"
### Not currently used --- export SISTA_BACKUP_HOST="kobus@kraken.sista.arizona.edu"

# For misc backups, we coopt the tomcat main backup disks, even though the stuff
# we are backing up does not appear on the main (fast) tomcat disks (tomcat_1,
# tomcat_2). 
#
export MISC_BACKUP_DIR_1="/tom_and_cat_shadow" 
export MISC_BACKUP_DIR_2="/tom_and_cat_backup" 

# This is relative to the external home. 
### Not currently used --- export OFFSITE_BACKUP_DIR="tomcat/backup" 

### Not currently used --- export TOMCAT_DATA_DIR="/data/tomcat/LangLab"

# Our exit status will be that of the last command that failed. 
exit_status=0

source ${TOMCAT_DIR}shared_code/bash/ivi_error_trap.bash  
# The initial commands in this script executes need to succeed, so we can
# simplify error handling to trap failures to report them, and then ask bash to
# exit. But at the begining we are not ready to report errors or do anything
# else so we simply die with non-zero return code. 
set -e

# Revoke possible removal of group perms (if we are running as root) and don't
# permit others any access. 
umask 0007 

source ${TOMCAT_DIR}shared_code/bash/ivi_error_trap.bash  

date_stamp=$(date +%y-%m-%d-%H-%M) 2>&1
backup_suffix="-RSYNC-${date_stamp}"

if [[ "${IVI_VERBOSE_3}" != "0" ]]; then
    rsync_verbose="-v -v -v" 
    remote_verbose="-v3"
elif [[ "${IVI_VERBOSE_2}" != "0" ]]; then
    rsync_verbose="-v -v" 
    remote_verbose="-v2"
elif [[ "${IVI_VERBOSE}" != "0" ]]; then
    rsync_verbose="-v" 
    remote_verbose="-v"
else  
    rsync_verbose=""
    remote_verbose=""
fi 

# If we get this far, there may be some value of doing subsequent rsyncs even if
# previous ones failed. 
set +e 

base_rsync_options="-rlptD -u --modify-window=20 -b --suffix ${backup_suffix}"

rsync_options="${rsync_verbose} ${base_rsync_options} -l"

for tomcat_raw_volume in ${RAW_DATA_VOLUMES}; do 
    ${VERBOSE_ECHO} "Script pull_tomcat_data_2 backing up ${tomcat_raw_volume}. "
    ${VERBOSE_ECHO} "Script pull_tomcat_data_2 executing: rsync ${rsync_options} ${tomcat_raw_volume}/ ${tomcat_raw_volume}_B1/" 
    rsync ${rsync_options} ${tomcat_raw_volume}/ ${tomcat_raw_volume}_B1/  
    rc=$?
    ${VERBOSE_ECHO} "Rsync return code was ${rc}"
    ${VERBOSE_ECHO} "Pending exit status in backup_tom_and_cat_2 is ${exit_status}"
    ${VERBOSE_ECHO} ""
 
    ${VERBOSE_ECHO} "Script pull_tomcat_data_2 executing: rsync ${rsync_options} ${tomcat_raw_volume}/ ${tomcat_raw_volume}_B2/" 
    rsync ${rsync_options} ${tomcat_raw_volume}/ ${tomcat_raw_volume}_B2/  
    rc=$?
    ${VERBOSE_ECHO} "Rsync return code was ${rc}"
    ${VERBOSE_ECHO} "Pending exit status in backup_tom_and_cat_2 is ${exit_status}"
    ${VERBOSE_ECHO} ""
done 

# # Backup experiments on SISTA 
# rsync_options="${rsync_verbose} ${base_rsync_options} --chown=:tomcat-editor"
# 
# target_dir="${OFFSITE_BACKUP_DIR}/LangLab"
# ${VERBOSE_ECHO} "Script backup_tom_and_cat_2 executing:"
# ${VERBOSE_ECHO} "    ssh -n -x ${SISTA_BACKUP_HOST} sg tomcat-editor -c \"mkdir -p ${target_dir}\" "
# ssh -n -x ${SISTA_BACKUP_HOST} sg tomcat-editor -c \"mkdir -p ${target_dir}\" 2>&1
# rc=$?
# ${VERBOSE_ECHO} "Remode mkdir return code was ${rc}"
# ${VERBOSE_ECHO} "Pending exit status is ${exit_status}"
# ${VERBOSE_ECHO} ""
# 
# if [[ ${rc} -eq 0 ]]; then
#     ${VERBOSE_ECHO} "Script backup_tom_and_cat_2 executing:"
#     ${VERBOSE_ECHO} "    rsync ${rsync_options} ${TOMCAT_DATA_DIR}/ ${SISTA_BACKUP_HOST}:${target_dir}"    
#     rsync ${rsync_options} ${TOMCAT_DATA_DIR}/ ${SISTA_BACKUP_HOST}:${target_dir} 2>&1 
#     rc=$?
#     ${VERBOSE_ECHO} "Rsync return code was ${rc}"
#     ${VERBOSE_ECHO} "Pending exit status is ${exit_status}"
#     ${VERBOSE_ECHO} ""
# else 
#     ${VERBOSE_ECHO} "Script backup_tom_and_cat_2 skipping backup of ${TOMCAT_DATA_DIR} due to remote mkdir failure."
# fi

# Backup stuff other than experiments on IVILAB disks. Here we need some extra
# excludes. Also, we want to follow symbolic links as we sometimes use them when
# dodging spaces issues. Better to risk having duplicates. However, rsync
# following links breaks if we have circular links. It actually reports "too
# many levels" eventually, but still fills the disk. So we need to manually fix
# them or exclude them. For now, we will only do this where we might need it,
# and skip doing for /home, which is where all the problems arise. This means
# that we have a special case for /home below. 
#
# No docker on cat on 22-09-29. Maybe in the future. 
for cat_dir in /home /data/cat /data/dev /data/dry_runs 
do 
   if [[ "${cat_dir}" == "/home" ]]; then 
        rsync_options="${rsync_verbose} ${base_rsync_options} -l --exclude=LIMBO --exclude=TRASH --exclude=.[tT]rash* --exclude=experiments"
   else
        rsync_options="${rsync_verbose} ${base_rsync_options} -L --exclude=LIMBO --exclude=TRASH --exclude=.[tT]rash* --exclude=experiments"
   fi 

    ${VERBOSE_ECHO} "Script backup_tom_and_cat_2 is working on cat directory: ${cat_dir}."
    target_dir=${MISC_BACKUP_DIR_1}/cat/${cat_dir}
    ${VERBOSE_ECHO} "Script backup_tom_and_cat_2 executing:"
    ${VERBOSE_ECHO} "   mkdir -p ${target_dir}"
    mkdir -p "${target_dir}" 2>&1
    rc=$?
    ${VERBOSE_ECHO} "mkdir return code was ${rc}"
    ${VERBOSE_ECHO} "Pending exit status in backup_tom_and_cat_2 is ${exit_status}"
    ${VERBOSE_ECHO} ""

    if [[ ${rc} -eq 0 ]]; then
        ${VERBOSE_ECHO} "Script backup_tom_and_cat_2 executing:"
        ${VERBOSE_ECHO} "    rsync ${rsync_options} ${ROOT_USER_ON_CAT}:${cat_dir}/ ${target_dir}"    
        rsync ${rsync_options} ${ROOT_USER_ON_CAT}:${cat_dir}/ ${target_dir} 2>&1 
        rc=$?
        ${VERBOSE_ECHO} "Rsync return code was ${rc}"
        ${VERBOSE_ECHO} "Pending exit status in backup_tom_and_cat_2 is ${exit_status}"
        ${VERBOSE_ECHO} ""
    else 
        ${VERBOSE_ECHO} "Script backup_tom_and_cat_2 skipping backup of cat directory ${cat_dir} due to remote mkdir failure."
    fi
done

rsync_options="${rsync_verbose} ${base_rsync_options} -l --exclude=LIMBO --exclude=TRASH --exclude=.[tT]rash* --exclude=experiments"

# Skip /data/tom for now. Definately want '-l' in the options, as docker (at
# least) has circular links. 
for tom_dir in /var/lib/docker /home/
do 
    ${VERBOSE_ECHO} "Script backup_tom_and_cat_2 is working on tom directory: ${tom_dir}."
    target_dir=${MISC_BACKUP_DIR_1}/tom/${tom_dir}
    ${VERBOSE_ECHO} "Script backup_tom_and_cat_2 executing:"
    ${VERBOSE_ECHO} "     mkdir -p ${target_dir}"
    mkdir -p "${target_dir}" 2>&1
    rc=$?
    ${VERBOSE_ECHO} "mkdir return code was ${rc}"
    ${VERBOSE_ECHO} "Pending exit status in backup_tom_and_cat_2 is ${exit_status}"
    ${VERBOSE_ECHO} ""

    if [[ ${rc} -eq 0 ]]; then
        ${VERBOSE_ECHO} "Script backup_tom_and_cat_2 executing:"
        ${VERBOSE_ECHO} "    rsync ${rsync_options} ${ROOT_USER_ON_TOM}:${tom_dir}/ ${target_dir}"
        rsync ${rsync_options} ${ROOT_USER_ON_TOM}:${tom_dir}/ ${target_dir} 2>&1 
        rc=$?
        ${VERBOSE_ECHO} "Rsync return code was ${rc}"
        ${VERBOSE_ECHO} "Pending exit status in backup_tom_and_cat_2 is ${exit_status}"
        ${VERBOSE_ECHO} ""
    else 
        ${VERBOSE_ECHO} "Script backup_tom_and_cat_2 skipping backup of tom directory ${tom_dir} due to remote mkdir failure."
    fi
done

rsync_options="${rsync_verbose} ${base_rsync_options} -l"

${VERBOSE_ECHO} rsync ${rsync_options} ${MISC_BACKUP_DIR_1}/ ${MISC_BACKUP_DIR_2}  
rsync ${rsync_options} ${MISC_BACKUP_DIR_1}/ ${MISC_BACKUP_DIR_2}  
rc=$?
${VERBOSE_ECHO} "Rsync return code was ${rc}"
${VERBOSE_ECHO} "Pending exit status in backup_tom_and_cat_2 is ${exit_status}"
${VERBOSE_ECHO} ""


${VERBOSE_ECHO} rsync ${rsync_options} /tomcat/ /tomcat_mirror
rsync ${rsync_options} /tomcat/ /tomcat_mirror
rc=$?
${VERBOSE_ECHO} "Rsync return code was ${rc}"
${VERBOSE_ECHO} "Pending exit status in backup_tom_and_cat_2 is ${exit_status}"
${VERBOSE_ECHO} ""


echo " "
# eval echo "Script backup_tom_and_cat_2 exiting with status ${exit_status} on: $(date)" 
eval echo "Script backup_tom_and_cat_2 exiting with status ${exit_status} on: $(date)" 
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" 

exit ${exit_status} 


